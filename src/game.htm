<!DOCTYPE html>
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>TARDQUEST</title>
    <style>
        /* ===== Scrollbar CSS ===== */
        /* Firefox */
        * {
            scrollbar-width: thin;
            scrollbar-color: #fff #000;
        }

        /* Chrome, Edge, and Safari */
        *::-webkit-scrollbar {
            width: 12px;
        }

        *::-webkit-scrollbar-track {
            background: #000;
        }

        *::-webkit-scrollbar-thumb {
            background-color: #000;
            border-radius: 0px;
            border: 0px solid #fff;
        }

        @font-face {
            font-family: 'DejaVuSansMono';
            src: url('fonts/DejaVuSansMono.woff') format('woff');
        }

        * {
            font-family: "DejaVuSansMono", monospace;
        }

        body {
            background: #000;
            color: #fff;
            font-size: 10px;
            white-space: pre;
            padding: 20px;
            display: flex;
            box-sizing: content-box;
        }

        a:visited,
        a:link {
            color: #fff;
        }

        #ui {
            display: flex;
        }

        @keyframes darken {
            from {
                filter: brightness(1);
            }

            to {
                filter: brightness(0);
            }
        }

        @keyframes lighten {
            from {
                filter: brightness(0);
            }

            to {
                filter: brightness(1);
            }
        }

        #game {
            width: 100%;
            height: 100%;
            white-space: pre;
            margin-bottom: auto;
            align-content: center;

            font-size: unset;
            margin-top: unset;
            white-space: pre;
            /* Blue sky, dirt ground */
            /*
            background: linear-gradient(
                180deg,
                rgb(48, 89, 105) 0%,
                rgb(48, 89, 105) 50%,
                rgb(71, 54, 19) 50%,
                rgb(71, 54, 19) 100%
            );*/
            /* Bruised sky, gradient dirt ground */
            background: linear-gradient(
                180deg,
                #950913 0%,
                #060d40 50%,
                #000 50%,
                #513805 100%
            );
        }

        #game > .layer {
            position: absolute;
            top: 0;
            left: 0;
        }

        #game > .layer:nth-child(1) > span { color: rgb(42, 42, 42); }
        #game > .layer:nth-child(2) > span { color: rgb(51, 51, 51); }
        #game > .layer:nth-child(3) > span { color: rgb(63, 63, 63); }
        #game > .layer:nth-child(4) > span { color: rgb(85, 85, 85); }
        #game > .layer:nth-child(5) > span { color: rgb(127, 127, 127); }
        #game > .layer:nth-child(6) > span { color: rgb(255, 255, 255); }

        #game > .layer.dark {
            filter: brightness(0);
        }

        #game > .layer.darkening,
        #game > .layer.lightening {
            animation-name: darken;
            animation-duration: .5s;
            animation-fill-mode: forwards;
            animation-timing-function: ease;
        }

        #game > .layer.lightening {
            animation-name: lighten;
        }

        #game > .layer.enemy > span {
            color: #fff;
        }

        #game .layer,
        #game span {
            display: inline-block !important;
            font-size: 12px !important;
            line-height: 12px !important;
        }

        #menu:not(.hidden) {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding-bottom: 10px;
            background-color: #000;
            z-index: 9;
        }

        #menuList {
            margin-bottom: auto;
            padding-left: 1em;
            min-height: 150px;
            z-index: 9;
        }
        #pageNum {
            text-align: right;
            margin-right: 14px;
            color: #ccc;
        }

        #menuList,
        #menuSelectionDescription {
            flex-grow: 1;
            white-space: pre-wrap;
        }

        #menuLanding,
        #menuSelectionDescription {
            padding: 0 1em;
        }

        #menuList::before,
        #menuSelectionDescription::before {
            display: block;
            text-align: center;
        }

        #menuLanding {
            display: flex;
            flex-direction: column;
            white-space: pre-wrap;
            min-height: 8em;
        }

        #menuLanding > .title {
            margin: 0 auto 1em;
            letter-spacing: 1ch;
        }

        #animation:not(.hidden) {
            white-space: pre;
            overflow: hidden;
            text-align: initial;
            width: 100%;
            background: #000;
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9;
        }

        @keyframes explosionColors {
            0% {
                background-color: #FFF5AD;
                opacity: 1;
            }

            32% {
                background-color: #F00;
                opacity: 1;
            }

            38% {
                background-color: #FFBC14;
                opacity: 1;
            }

            45% {
                background-color: #FFF;
                opacity: 1;
            }

            50% {
                background-color: #464FFC;
                opacity: 1;
            }

            100% {
                background-color: #000;
                opacity: 0;
            }
        }

        #animation.explosion {
            font-size: 12px;
            mix-blend-mode: lighten;
            animation-name: explosionColors;
            animation-duration: 240ms;
            animation-iteration-count: 1;
            animation-direction: forwards;
            animation-timing-function: linear;
        }

        #viewportContainer {
            position: absolute;
            left: 256px;
            top: 147px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            width: 360px;
            height: 338px;
            overflow: hidden;
            box-sizing: content-box;
            align-items: center;
            justify-content: space-between;
        }


        #sidePanel {
            margin-left: 0px;
            display: flex;
            flex-direction: column;
        }
        #partylist {
            height: 130px;
            width: 348px;
            position: absolute;
            border: 2px solid #fff;
            top: 489px;
            left: 250px;
            padding: 10px;
            text-overflow: ellipsis;
            word-wrap: break-word;
            white-space: pre-wrap;
            overflow-y: auto;
            justify-content: space-between;
            font-size: 12px;
        }
        #yourparty {
            font-size: 20px;
        }
        #stats1 {
            height: 338px;
            width: 90px;
            position: absolute;
            border: 2px solid #fff;
            top: 140px;
            left: 620px;
            padding: 5px;
            overflow: hidden;
            font-size: 18px;
            font-weight: bold;
            text-align: left;
            line-height: 1.1;
        }
        #stats2 {
            height: 140px;
            width: 90px;
            position: absolute;
            border: 2px solid #fff;
            top: 489px;
            left: 620px;
            padding: 5px;
            overflow: hidden;
            font-size: 13px;
            font-weight: bold;
            line-height: 1.0;
        }
        .stats-container {
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            line-height: 1;
            margin: 0;
        }

        .stats-label {
            font-size: 14px;
            margin-top: 2px;
            margin-bottom: 0;
            padding: 0;
        }
        #battleLog,
        #minimap {
            background: #000;
            border: 2px solid #fff;
            padding: 10px;
            width: 672px;
            height: auto;
        }

        #battleLog {
            height: 90px;
            text-overflow: ellipsis;
            word-wrap: break-word;
            white-space: pre-wrap;
            overflow-y: scroll;
        }

        #minimap {
            height: 166px;
            width: 216px;
            padding: 2px;
            white-space: pre;
            font-size: 12px;
            border-top: 0;
        }

        .hidden {
            display: none;
        }

        #inputBox {
            display: none;
        }
        #inputBox input::placeholder {
            color: #d8d8d8;
            opacity: 1;
        }

        #inputBox input {
            color: white;
            font-size: 13px;
            width: 600px;
            height: 2px;
            z-index: 9;
            background-color: #000;
            border: 3px dotted #A23AB4;
            padding: 10px;
            font-size: 16px;
            border-radius: 0px;
            text-align: left;
            position: absolute;
            top: 125px;
            left: 58px;
            outline: none;
        }

        .menus {
            position: absolute;
            border: solid white 2px;
            border-top: 0;
            top: 314px;
            width: 212px;
            height: 163px;
            overflow: hidden;
            line-height: 0px;
            font-size: 9px;
            padding: 4px;
            padding-top: 9px;
        }

        #controls {
            font-size: 14px;
            height: 130px;
            width: 200px;
            position: absolute;
            border: 2px solid #fff;
            top: 489px;
            padding: 10px;
            text-overflow: ellipsis;
            word-wrap: break-word;
            white-space: pre-wrap;
            overflow: hidden;
            justify-content: space-between;
        }
        #animEatRat {
            position: absolute;
            bottom: 0;
            right: 0;
            z-index: 9;
        }
        #animTorch {
            position: absolute;
            bottom: 0;
            left: 0;
            z-index: 0;
        }

        .player {
            color: #2aff00;
        }
        .healingTile {
            color: #6cff74;
        }
        .treasureChest {
            color: #f19b32;
        }
        .wall,
        .gloryWall {
            color: #e9ff00;
        }
        .floor {
            color: #fff;
        }
        .unexplored {
            color: #545454;
        }
        .exit {
            color: #f00;
        }
        .merchant {
            color: #f7f;
        }
        .gambler {
            color: #ffd700;
        }
        .muted {
            color: #666;
            text-decoration: line-through;
        }
        .tooExpensive {
            color: #f00;
        }

        .alignRight {
            text-align: right;
        }
        .friendly {
            color: #61C9F6;
        }
        .enemy {
            color: #EC4134;
        }
        .EXP {
            color: #6EBD70;
        }
        .LV {
            color: #6EBD70;
        }
        .BTC {
            color: #FAEB4A;
        }
        .HP {
            color: #F1483D;
        }
        .DEF {
            color: #1463BA;
        }
        .PRS {
            color: #A23AB4;
        }
        .SPD {
            color: #7ec5ee;
        }
        .LUK {
            color: #f5b609;
        }
        .action {
            color: #EC4134;
        }

        /**
         * Rendered scene class names
         * These are derived from the names in sceneRenderer.getEntityName()
         * which is also used to identify specific pieces of sceneArt
         *
         * The renderer adds <span> elements around each rendered character with
         * a "scene_character_" prefix. So for example, a "wall"
         */
        .scene_character_void {
            color: #000 !important;
        }

        .layer:not(.darkening):not(.dark):not(.lightening) > .scene_character_rubble1,
        .layer:not(.darkening):not(.dark):not(.lightening) > .scene_character_rubble2 {
            display: initial;
        }

        .scene_character_rubble1,
        .scene_character_rubble2 {
            display: none;
            background-color: transparent !important;
            mix-blend-mode: lighten;
            opacity: .2;
        }

        @keyframes scene_healingTileGlow {
          0% {
            color: #6CFF74;
          }
          25% {
            color: #02B60E;
          }
          50% {
            color: #02868C;
          }
          75% {
            color: #00920A;
          }
          100% {
            color: #8DD702;
          }
        }

        .scene_character_healingTile {
            animation-name: scene_healingTileGlow;
            animation-duration: 5s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
            animation-timing-function: linear;
        }

        @keyframes scene_exitGlow {
            0% {
                color: #FFF000;
            }
            25% {
                color: #FF7400;
            }
            50% {
                color: #FFF000;
            }
            75% {
                color: #CD0074;
            }
            100% {
                color: #FF0000;
            }
        }

        .scene_character_exit {
            animation-name: scene_exitGlow;
            animation-duration: 5s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
            animation-timing-function: linear;
        }

        @keyframes scene_treasureChestGlow {
            0% {
                color: #FFD700;
            }
            100% {
                color: #FFF;
            }
        }

        .scene_character_treasureChest {
            animation-name: scene_treasureChestGlow;
            animation-duration: 2s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
            animation-timing-function: ease-out;
            background-color: #793311;
            color: #ffd700;
        }

        .scene_character_tardspireBanner {
            color: #edc949 !important;
            background: #000;
            mix-blend-mode: luminosity;
        }

        .scene_character_crater {
            color: #0009 !important;
            background-color: transparent !important;
        }

        .scene_character_bloodyCrater {
            color: #9009 !important;
            background-color: #3003 !important;
        }
  </style>
</head>
<body>
  <div class="menus">
        <a href="title.html">TITLE</a>  <a href="#" id="resetButton">RESET</a>  <a href="#" id="musicToggle">DISABLE MUSIC</a>

        <p><strong>KEY</strong></p>
        <p><span class="player">↑</span> Player: It's you!</p>
        <p><span class="wall">#</span> Wall: It's a fucking wall</p>
        <p><span class="exit">E</span> Exit: Touch to descend further</p>
        <p><span class="merchant">M</span> Merchant: Sells you crap</p>
        <p><span class="gambler">G</span> Gambler: A shady shyster</p>
        <p><span class="healingTile">H</span> Healing Tile: Heals you by 30% of max HP</p>
        <p><span class="treasureChest">T</span> Treasure Chest: Contains items</p>
        <p><span class="unexplored">?</span> Undiscovered: Who knows?</p>
      </div>
  <div id="partylist"></div>
  <div id="stats1"></div>
  <div id="stats2"></div>
  <div id="controls"></div>
  <div id="viewportContainer">
    <div id="game" class="render"></div>
    <div id="animation" class="hidden"></div>
    <div id="menu" class="hidden">
        <div id="menuLanding"></div>
        <div id="menuList"></div>
        <div id="menuSelectionDescription"></div>
        <div class="alignRight">Press Escape to go back</div>
    </div>
  </div>
  <div id="ui">
    <div id="sidePanel">
      <div id="battleLog"></div>
      <div id="minimap"></div>
      <div id="inputBox">
        <input type="text" id="persuadeInput" placeholder="Say your piece...">
      </div>
    </div>
  </div>

    <script>
        /**
         * ASCII art that the sceneRenderer uses to draw scenes
         *
         * Each entry here has a name (eg: "wall", "healingTile", etc) which is
         * used to identify the map object that is being rendered
         *
         * Each sceneArt entry is an object that points to art for that thing.
         * The object is broken into positions relative to the viewport of the
         * rendered scene. Positions are denoted as "p#_#" where "p" means
         * "position". The first # is the distance (or depth, or Z-coordinate,
         * however you want to think of it). The second "#" is the X-coordinate
         * of what the player is currently seeing, going from left to right.
         *
         * For example, the player is seeing everything in the triangle in this
         * map, including the spaces to the immediate left and right (p0_0 and
         * p0_2 respectively):
         *
         * Distance 5   \........./
         * Distance 4   .\......./.
         * Distance 3   ..\...../..
         * Distance 2   ...\.../...
         * Distance 1   ....\./....
         * Distance 0   .....↑.....
         *            Player ⤴
         *
         * Each cell is numbered this way (with "X" meaning 10):

         * Distance 5   0123456789X
         * Distance 4   .012345678.
         * Distance 3   ..0123456..
         * Distance 2   ...01234...
         * Distance 1   ....012....
         * Distance 0   ....012....
         *            Player ⤴
         *
         * So if the player's vision spots a wall at distance 3, position 4,
         * we would want to render the wall with the art referenced by entry
         * "p3_4"
         *
         * The whitespace for each piece of art is automatically trimmed from
         * the left side. This is to preserve formatting in the code (JavaScript
         * does not support heredocs unfortunately). But sometimes spaces are
         * desired as part of the art. So, a spaceBoundaryCharacter might be set
         * which will stop the whitespace from trimming into the art. This
         * character will be replaced with a space during rendering
         *
         * Each object also has an x and y value. This is the character offset
         * of where the art will start to be drawn
         *
         * Art may also have a transparentCharacter defined which will simply
         * not draw anything for that character when rendered
         */
        const sceneArt = {
            tardspireBanner: {
                positions: {
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 6, y: 4 },
                    },
                },
                art: [
                    {
                        data: `
                            ▛▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▜
                            ▌       W E L C O M E    T O . . .   ▐
                            ▌T ▀█▀▄▀▄ █▀▙ █▀▄ ▄▀▀ █▀▄▀█▀ █▀▙ █▀▀ ▐
                            ▌H  █ █▄█ █▄▛ █ █  ▀▄ █▄▀ █  █▄▛ █▄▄ ▐
                            ▌E  █ █ █ █ █ █▄▀ ▄▄▀ █  ▄█▄ █ █ █▄▄ ▐
                            ▙▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▟
                        `,
                    },
                ],
            },
            wall: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: 0, y: 1 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 44, y: 1 },
                    },
                    p1_0: {
                        artIndex: 1,
                        drawAt: { x: 0, y: 4 },
                    },
                    p1_1: {
                        artIndex: 2,
                        drawAt: { x: 5, y: 4 },
                    },
                    p1_2: {
                        artIndex: 1,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 35, y: 4 },
                    },
                    p2_0: {
                        artIndex: 3,
                        drawAt: { x: 0, y: 9 },
                    },
                    p2_1: {
                        artIndex: 4,
                        drawAt: { x: 0, y: 8 },
                    },
                    p2_2: {
                        artIndex: 5,
                        drawAt: { x: 14, y: 8 },
                    },
                    p2_3: {
                        artIndex: 4,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 30, y: 8 },
                    },
                    p2_4: {
                        artIndex: 3,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 41, y: 9 },
                    },
                    p3_0: {
                        artIndex: 6,
                        drawAt: { x: 0, y: 12 },
                    },
                    p3_1: {
                        artIndex: 7,
                        drawAt: { x: -3, y: 11 },
                    },
                    p3_2: {
                        artIndex: 7,
                        drawAt: { x: 8, y: 11 },
                    },
                    p3_3: {
                        artIndex: 8,
                        drawAt: { x: 19, y: 11 },
                    },
                    p3_4: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 27, y: 11 },
                    },
                    p3_5: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 34, y: 11 },
                    },
                    p3_6: {
                        artIndex: 6,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 12 },
                    },
                    p4_0: {
                        artIndex: 9,
                        drawAt: { x: 2, y: 12 },
                    },
                    p4_1: {
                        artIndex: 9,
                        drawAt: { x: 7, y: 12 },
                    },
                    p4_2: {
                        artIndex: 10,
                        drawAt: { x: 12, y: 12 },
                    },
                    p4_3: {
                        artIndex: 11,
                        drawAt: { x: 17, y: 12 },
                    },
                    p4_4: {
                        artIndex: 12,
                        drawAt: { x: 22, y: 12 },
                    },
                    p4_5: {
                        artIndex: 11,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 26, y: 12 },
                    },
                    p4_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 30, y: 12 },
                    },
                    p4_7: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 35, y: 12 },
                    },
                    p4_8: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 40, y: 12 },
                    },
                    p5_0: {
                        artIndex: 13,
                        drawAt: { x: 14, y: 13 },
                    },
                    p5_1: {
                        artIndex: 13,
                        drawAt: { x: 16, y: 13 },
                    },
                    p5_2: {
                        artIndex: 13,
                        drawAt: { x: 18, y: 13 },
                    },
                    p5_3: {
                        artIndex: 13,
                        drawAt: { x: 20, y: 13 },
                    },
                    p5_4: {
                        artIndex: 13,
                        drawAt: { x: 22, y: 13 },
                    },
                    p5_5: {
                        artIndex: 13,
                        drawAt: { x: 24, y: 13 },
                    },
                    p5_6: {
                        artIndex: 13,
                        drawAt: { x: 26, y: 13 },
                    },
                    p5_7: {
                        artIndex: 13,
                        drawAt: { x: 28, y: 13 },
                    },
                    p5_8: {
                        artIndex: 13,
                        drawAt: { x: 30, y: 13 },
                    },
                    p5_9: {
                        artIndex: 13,
                        drawAt: { x: 32, y: 13 },
                    },
                    p5_10: {
                        artIndex: 13,
                        drawAt: { x: 34, y: 13 },
                    },
                },
                art: [
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄
                            ██▄
                            ████▄
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ████▀
                            ██▀
                            ▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████▄
                            ██████▒█▄
                            ██████▒███▄
                            ██████▒█████▄
                            ██████▒███████▄
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒████████
                            ██████▒███████▀
                            ██████▒█████▀
                            ██████▒███▀
                            ██████▒█▀
                            ██████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄
                            █████▄▄▄
                            █████████
                            █████████
                            █████████
                            █████████
                            █████████
                            █████████
                            █████▀▀▀
                            ▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ███████████████▒▄
                            ███████████████▒██▄
                            ███████████████▒████
                            ███████████████▒████
                            ███████████████▒████
                            ███████████████▒████
                            ███████████████▒████
                            ███████████████▒████
                            ███████████████▒██▀
                            ███████████████▒▀
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██▄▄
                            ████
                            ████
                            ██▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███████████▓▄
                            ███████████▓██▄
                            ███████████▓███
                            ███████████▓███
                            ███████████▓██▀
                            ███████████▓▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████████
                            ████████████
                            ████████████
                            ████████████
                            ████████████
                            ████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            ██████▓▄
                            ██████▓▀
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            ███████▄
                            ███████▀
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            ███████
                            ███████
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            ██████
                            ██████
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄
                            ▀▀
                        `,
                    },
                ],
            },

            void: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: 0, y: 14 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 45, y: 14 },
                    },
                    p1_0: {
                        artIndex: 1,
                        drawAt: { x: 0, y: 14 },
                    },
                    p1_1: {
                        artIndex: 2,
                        drawAt: { x: 5, y: 14 },
                    },
                    p1_2: {
                        artIndex: 1,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 14 },
                    },
                    p2_0: {
                        artIndex: 3,
                        drawAt: { x: 0, y: 14 },
                    },
                    p2_1: {
                        artIndex: 4,
                        drawAt: { x: 0, y: 14 },
                    },
                    p2_2: {
                        artIndex: 5,
                        drawAt: { x: 14, y: 14 },
                    },
                    p2_3: {
                        artIndex: 4,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 31, y: 14 },
                    },
                    p2_4: {
                        artIndex: 3,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 42, y: 14 },
                    },
                    p3_0: {
                        artIndex: 6,
                        drawAt: { x: 0, y: 14 },
                    },
                    p3_1: {
                        artIndex: 7,
                        drawAt: { x: -3, y: 14 },
                    },
                    p3_2: {
                        artIndex: 7,
                        drawAt: { x: 8, y: 14 },
                    },
                    p3_3: {
                        artIndex: 8,
                        drawAt: { x: 19, y: 14 },
                    },
                    p3_4: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 28, y: 14 },
                    },
                    p3_5: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 35, y: 14 },
                    },
                    p3_6: {
                        artIndex: 6,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 47, y: 14 },
                    },
                    p4_0: {
                        artIndex: 9,
                        drawAt: { x: 2, y: 14 },
                    },
                    p4_1: {
                        artIndex: 9,
                        drawAt: { x: 7, y: 14 },
                    },
                    p4_2: {
                        artIndex: 10,
                        drawAt: { x: 12, y: 14 },
                    },
                    p4_3: {
                        artIndex: 11,
                        drawAt: { x: 17, y: 14 },
                    },
                    p4_4: {
                        artIndex: 12,
                        drawAt: { x: 22, y: 14 },
                    },
                    p4_5: {
                        artIndex: 11,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 27, y: 14 },
                    },
                    p4_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 31, y: 14 },
                    },
                    p4_7: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 14 },
                    },
                    p4_8: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 41, y: 14 },
                    },
                    p5_0: {
                        artIndex: 13,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 13,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 13,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 13,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 13,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 13,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 13,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 13,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 13,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 13,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 13,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        automaskBlockCharacters: true,
                        data: `
                            █████
                            █████
                            █████
                            █████
                            █████
                            █████
                            █████
                            █████
                            █████
                            █████
                            ████▀
                            ██▀
                            ▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████████████
                            ██████████████
                            ██████████████
                            ██████████████
                            ██████████████
                            ██████████████
                            ████████████▀
                            ██████████▀
                            ████████▀
                            ██████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████
                            ████████
                            ████████
                            █████▀▀▀
                            ▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███████████████████
                            ███████████████████
                            ███████████████████
                            ██████████████████▀
                            ████████████████▀
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███
                            ██▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████████████
                            ██████████████
                            ████████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████████
                            ████████████
                            ████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███████
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███████
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████
                            ▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▀▀
                        `,
                    },
                ],
            },

            rubble1: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -19, y: 24 },
                    },
                    p0_1: {
                        artIndex: 11,
                        drawAt: { x: 5, y: 24 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 24 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -12, y: 20 },
                    },
                    p1_1: {
                        artIndex: 1,
                        drawAt: { x: 8, y: 20 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 38, y: 20 },
                    },
                    p2_0: {
                        artIndex: 2,
                        drawAt: { x: 0, y: 18 },
                    },
                    p2_1: {
                        artIndex: 3,
                        drawAt: { x: 3, y: 17 },
                    },
                    p2_2: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 17 },
                    },
                    p2_3: {
                        artIndex: 5,
                        drawAt: { x: 32, y: 17 },
                    },
                    p2_4: {
                        artIndex: 2,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 42, y: 18 },
                    },
                    p3_0: {
                        artIndex: 10,
                        drawAt: { x: -9, y: 15 },
                    },
                    p3_1: {
                        artIndex: 10,
                        drawAt: { x: -3, y: 16 },
                    },
                    p3_2: {
                        artIndex: 10,
                        drawAt: { x: 8, y: 16 },
                    },
                    p3_3: {
                        artIndex: 7,
                        drawAt: { x: 20, y: 16 },
                    },
                    p3_4: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 29, y: 16 },
                    },
                    p3_5: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 16 },
                    },
                    p3_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 15 },
                    },
                    p4_0: {
                        artIndex: 8,
                        drawAt: { x: 2, y: 15 },
                    },
                    p4_1: {
                        artIndex: 8,
                        drawAt: { x: 7, y: 15 },
                    },
                    p4_2: {
                        artIndex: 8,
                        drawAt: { x: 12, y: 15 },
                    },
                    p4_3: {
                        artIndex: 8,
                        drawAt: { x: 17, y: 15 },
                    },
                    p4_4: {
                        artIndex: 8,
                        drawAt: { x: 22, y: 15 },
                    },
                    p4_5: {
                        artIndex: 8,
                        drawAt: { x: 27, y: 15 },
                    },
                    p4_6: {
                        artIndex: 8,
                        drawAt: { x: 32, y: 15 },
                    },
                    p4_7: {
                        artIndex: 8,
                        drawAt: { x: 37, y: 15 },
                    },
                    p4_8: {
                        artIndex: 8,
                        drawAt: { x: 42, y: 15 },
                    },
                    p5_0: {
                        artIndex: 9,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 9,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 9,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 9,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 9,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 9,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 9,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 9,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 9,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 9,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 9,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            '  .'   .  '    ..   '   .
                            %%%%% .;' .   '   . ' .
                            %%%%'   .    ;'  ' '  , '
                            %%%%%%. '. .'   ,'  ;.
                        `
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%    . '     ;'  '   . ,
                            %%%%%'  ..    ',.    .  '   ';,
                            %%%%'   ;' ,' . .  .  , ,       .
                            %%% , .   .    '   ;  ' .'   '
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %.  .; '
                            .'
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%. ,  . ,
                            . ;'  ,. .  :,
                        `
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%% ;'.   .  ,
                            %% , . '    '  .
                        `,
                    },
                    {
                        data: `
                            .  ,.  .  ,
                             '    ',  . , .
                        `,
                    },
                    {
                        data: `
                            '. ;. :  .'  '
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%.'  ';
                        `,
                    },
                    {
                        data: `
                            ' "' '
                        `,
                    },
                    {
                        data: `
                            --
                        `,
                    },
                    {
                        data: `
                            . ,' '"  '
                        `,
                    },
                    {
                        data: `
                             ' .  ' .   '   ' ,.     ;   .  , ' .  '
                            '    ,'  ;          .;                .
                              ,'  ,'.  ' .,   '    ; '.    '     ' .
                            .  '      ' . '      '    . ',  ; .
                        `,
                    },
                ],
            },

            rubble2: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -19, y: 24 },
                    },
                    p0_1: {
                        artIndex: 11,
                        drawAt: { x: 5, y: 24 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 24 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -12, y: 20 },
                    },
                    p1_1: {
                        artIndex: 1,
                        drawAt: { x: 8, y: 20 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 38, y: 20 },
                    },
                    p2_0: {
                        artIndex: 2,
                        drawAt: { x: 0, y: 18 },
                    },
                    p2_1: {
                        artIndex: 3,
                        drawAt: { x: 3, y: 17 },
                    },
                    p2_2: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 17 },
                    },
                    p2_3: {
                        artIndex: 5,
                        drawAt: { x: 32, y: 17 },
                    },
                    p2_4: {
                        artIndex: 2,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 42, y: 18 },
                    },
                    p3_0: {
                        artIndex: 10,
                        drawAt: { x: -9, y: 15 },
                    },
                    p3_1: {
                        artIndex: 10,
                        drawAt: { x: -3, y: 16 },
                    },
                    p3_2: {
                        artIndex: 10,
                        drawAt: { x: 8, y: 16 },
                    },
                    p3_3: {
                        artIndex: 7,
                        drawAt: { x: 20, y: 16 },
                    },
                    p3_4: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 29, y: 16 },
                    },
                    p3_5: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 16 },
                    },
                    p3_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 15 },
                    },
                    p4_0: {
                        artIndex: 8,
                        drawAt: { x: 2, y: 15 },
                    },
                    p4_1: {
                        artIndex: 8,
                        drawAt: { x: 7, y: 15 },
                    },
                    p4_2: {
                        artIndex: 8,
                        drawAt: { x: 12, y: 15 },
                    },
                    p4_3: {
                        artIndex: 8,
                        drawAt: { x: 17, y: 15 },
                    },
                    p4_4: {
                        artIndex: 8,
                        drawAt: { x: 22, y: 15 },
                    },
                    p4_5: {
                        artIndex: 8,
                        drawAt: { x: 27, y: 15 },
                    },
                    p4_6: {
                        artIndex: 8,
                        drawAt: { x: 32, y: 15 },
                    },
                    p4_7: {
                        artIndex: 8,
                        drawAt: { x: 37, y: 15 },
                    },
                    p4_8: {
                        artIndex: 8,
                        drawAt: { x: 42, y: 15 },
                    },
                    p5_0: {
                        artIndex: 9,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 9,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 9,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 9,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 9,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 9,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 9,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 9,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 9,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 9,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 9,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        data: `
                             '   , ' .   .  ' ,  , ' .
                            .  ;  '        '    ' .
                                 .   ;   '     .    ,
                                   '       : '   . '
                        `
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%'      .   ;   '      '
                            %%%%%,  ; , ' .   .  ' ,  ,   .
                            %%%%    .   ;   '       : '.   ,
                            %%% '  .  '   ,    ;  .         '
                        `,
                    },
                    {
                        data: `
                             '  ; '
                            ,
                        `,
                    },
                    {
                        data: `
                            '    .      ,
                             .  ';  '  .  '
                        `
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%.  '   .  ,
                            % '    ,   .    ;
                        `,
                    },
                    {
                        data: `
                            '  . '  ;  .
                             ,    '   '   .
                        `,
                    },
                    {
                        data: `
                            . '    . ;  '
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%'.  ;.
                        `,
                    },
                    {
                        data: `
                            .'  ',
                        `,
                    },
                    {
                        data: `
                            --
                        `,
                    },
                    {
                        data: `
                            '  ; ..  ,
                        `,
                    },
                    {
                        data: `
                            .  '      ' . '      '    . ',  ; .
                              ,'  ,'.  ' .,   '    ; '.    '     ' .
                            '    ,'  ;          .;                .
                             ' .  ' .   '   ' ,.     ;   .  , ' .  '
                        `,
                    },
                ],
            },

            gloryWall: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: 0, y: 1 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 44, y: 1 },
                    },
                    p1_0: {
                        artIndex: 1,
                        drawAt: { x: 0, y: 4 },
                    },
                    p1_1: {
                        artIndex: 2,
                        drawAt: { x: 5, y: 4 },
                    },
                    p1_2: {
                        artIndex: 1,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 35, y: 4 },
                    },
                    p2_0: {
                        artIndex: 3,
                        drawAt: { x: 0, y: 9 },
                    },
                    p2_1: {
                        artIndex: 4,
                        drawAt: { x: 0, y: 8 },
                    },
                    p2_2: {
                        artIndex: 5,
                        drawAt: { x: 14, y: 8 },
                    },
                    p2_3: {
                        artIndex: 4,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 30, y: 8 },
                    },
                    p2_4: {
                        artIndex: 3,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 41, y: 9 },
                    },
                    p3_0: {
                        artIndex: 6,
                        drawAt: { x: 0, y: 12 },
                    },
                    p3_1: {
                        artIndex: 7,
                        drawAt: { x: -3, y: 11 },
                    },
                    p3_2: {
                        artIndex: 7,
                        drawAt: { x: 8, y: 11 },
                    },
                    p3_3: {
                        artIndex: 8,
                        drawAt: { x: 19, y: 11 },
                    },
                    p3_4: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 27, y: 11 },
                    },
                    p3_5: {
                        artIndex: 7,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 34, y: 11 },
                    },
                    p3_6: {
                        artIndex: 6,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 12 },
                    },
                    p4_0: {
                        artIndex: 9,
                        drawAt: { x: 2, y: 12 },
                    },
                    p4_1: {
                        artIndex: 9,
                        drawAt: { x: 7, y: 12 },
                    },
                    p4_2: {
                        artIndex: 10,
                        drawAt: { x: 12, y: 12 },
                    },
                    p4_3: {
                        artIndex: 11,
                        drawAt: { x: 17, y: 12 },
                    },
                    p4_4: {
                        artIndex: 12,
                        drawAt: { x: 22, y: 12 },
                    },
                    p4_5: {
                        artIndex: 11,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 26, y: 12 },
                    },
                    p4_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 30, y: 12 },
                    },
                    p4_7: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 35, y: 12 },
                    },
                    p4_8: {
                        artIndex: 9,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 40, y: 12 },
                    },
                    p5_0: {
                        artIndex: 13,
                        drawAt: { x: 14, y: 13 },
                    },
                    p5_1: {
                        artIndex: 13,
                        drawAt: { x: 16, y: 13 },
                    },
                    p5_2: {
                        artIndex: 13,
                        drawAt: { x: 18, y: 13 },
                    },
                    p5_3: {
                        artIndex: 13,
                        drawAt: { x: 20, y: 13 },
                    },
                    p5_4: {
                        artIndex: 13,
                        drawAt: { x: 22, y: 13 },
                    },
                    p5_5: {
                        artIndex: 13,
                        drawAt: { x: 24, y: 13 },
                    },
                    p5_6: {
                        artIndex: 13,
                        drawAt: { x: 26, y: 13 },
                    },
                    p5_7: {
                        artIndex: 13,
                        drawAt: { x: 28, y: 13 },
                    },
                    p5_8: {
                        artIndex: 13,
                        drawAt: { x: 30, y: 13 },
                    },
                    p5_9: {
                        artIndex: 13,
                        drawAt: { x: 32, y: 13 },
                    },
                    p5_10: {
                        artIndex: 13,
                        drawAt: { x: 34, y: 13 },
                    },
                },
                art: [
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄
                            ██▄
                            ████▄
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ██████
                            ████▀
                            ██▀
                            ▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██████▄
                            ██████▒█▄
                            ██████▒███▄
                            ██████▒█████▄
                            ██████▒███████▄
                            ██████▒█▒▒█████
                            ██████▒█▒█▒▒███
                            ██████▒███▒█▒██
                            ██████▒████▒███
                            ██████▒██▒█████
                            ██████▒█████▒██
                            ██████▒███░▒███
                            ██████▒██▒▒████
                            ██████▒████████
                            ██████▒███▒████
                            ██████▒███████▀
                            ██████▒█████▀
                            ██████▒███▀
                            ██████▒█▀
                            ██████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: false,
                        data: `
                            ████████████████████████████████████████
                            ████████████████████████████████████████
                            ██████████▀█████████▀███████████████████
                            █████▀▄▄█▀▄▀▄▄▀█▀▄▄█▄▀ █████████████████
                            ████ █▄ █ █▄▀▀▄█ ██▀▀▀▄█████████████████
                            █████▄▄█████████████████████████████████
                            ██████████▀██▀██████ ███████████████████
                            █████████ ▀▀ █▀▄▄▀█ ██▀▄▄▀██████████████
                            ████████ ███ █▄▀▀▄█ █ █▄▄███████████████
                            ██████████████████████▄▄███▀▀▀██████████
                            ██████████████████████████████▄▄▀███████
                            ████████████████████████████████ ███████
                            ████████████████▀▀██▓██▀ ████▀▀▄████████
                            ███████████████    ███▄  ▄▄▄▄███████████
                            █████████████▓██▄▄████▓█▄███████████████
                            ████████████████▒░█▓████████████████████
                            ██████████████▒██▒██████████████████████
                            ████████████████▓███████████████████████
                            █████████████████▓██████████████████████
                            ████████████████████████████████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄
                            █████▄▄▄
                            █████████
                            ██▓▓▓▓███
                            █▓█▓█▓███
                            ████▓████
                            ██▒▒█████
                            █████████
                            █████▀▀▀
                            ▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ███████████████▒▄
                            ██▓█▓██████████▒██▄
                            █▓█▓█▓█▓█▓█████▒████
                            ██▓█▓█████▓████▒████
                            █████████▓█████▒████
                            ████████▓██████▒████
                            ████▒▒█████████▒████
                            ███████████████▒████
                            ████▓██████████▒██▀
                            ███████████████▒▀
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ██████████████████████
                            ██████████████████████
                            ████▓▓██▓██▓██████████
                            ███▓██▓▓█▓██▓█▓███████
                            ██████████▓████▓▓█████
                            ██████████████▓███████
                            ████████▒▒▓█▓█████████
                            ██████████████████████
                            ██████████████████████
                            ██████████████████████
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ██▄▄
                            █▓██
                            ██▓█
                            ██▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ███████████▓▄
                            ██▓█▓█▓████▓██▄
                            ███▓███▓███▓███
                            ███▓▒▓█████▓███
                            ███████████▓██▀
                            ███████████▓▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ████████████
                            ██▓█▓█▓█████
                            ████████▓███
                            ███▓▒▓▓█████
                            ████████████
                            ████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            █▓▓█▓█▓▄
                            ██▓▓███▓▀
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            █▓▓█▓██▄
                            ██▓▓███▀
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            █▓▓█▓██
                            ██▓▓███
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄▄▄▄▄
                            █▓▓█▓█
                            ██▓▓██
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄
                            ▀▀
                        `,
                    },
                ],
            },

            healingTile: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -19, y: 24 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 24 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -12, y: 20 },
                    },
                    p1_1: {
                        artIndex: 1,
                        drawAt: { x: 8, y: 20 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 38, y: 20 },
                    },
                    p2_0: {
                        artIndex: 2,
                        drawAt: { x: 0, y: 18 },
                    },
                    p2_1: {
                        artIndex: 3,
                        drawAt: { x: 3, y: 17 },
                    },
                    p2_2: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 17 },
                    },
                    p2_3: {
                        artIndex: 5,
                        drawAt: { x: 32, y: 17 },
                    },
                    p2_4: {
                        artIndex: 2,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 42, y: 18 },
                    },
                    p3_0: {
                        artIndex: 10,
                        drawAt: { x: -9, y: 15 },
                    },
                    p3_1: {
                        artIndex: 10,
                        drawAt: { x: -3, y: 16 },
                    },
                    p3_2: {
                        artIndex: 10,
                        drawAt: { x: 8, y: 16 },
                    },
                    p3_3: {
                        artIndex: 7,
                        drawAt: { x: 20, y: 16 },
                    },
                    p3_4: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 29, y: 16 },
                    },
                    p3_5: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 16 },
                    },
                    p3_6: {
                        artIndex: 10,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 15 },
                    },
                    p4_0: {
                        artIndex: 8,
                        drawAt: { x: 2, y: 15 },
                    },
                    p4_1: {
                        artIndex: 8,
                        drawAt: { x: 7, y: 15 },
                    },
                    p4_2: {
                        artIndex: 8,
                        drawAt: { x: 12, y: 15 },
                    },
                    p4_3: {
                        artIndex: 8,
                        drawAt: { x: 17, y: 15 },
                    },
                    p4_4: {
                        artIndex: 8,
                        drawAt: { x: 22, y: 15 },
                    },
                    p4_5: {
                        artIndex: 8,
                        drawAt: { x: 27, y: 15 },
                    },
                    p4_6: {
                        artIndex: 8,
                        drawAt: { x: 32, y: 15 },
                    },
                    p4_7: {
                        artIndex: 8,
                        drawAt: { x: 37, y: 15 },
                    },
                    p4_8: {
                        artIndex: 8,
                        drawAt: { x: 42, y: 15 },
                    },
                    p5_0: {
                        artIndex: 9,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 9,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 9,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 9,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 9,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 9,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 9,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 9,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 9,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 9,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 9,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            ▀██████████████████████▀
                            %%▀██████████████████▀
                            %%%%▀██████████████▀
                            %%%%%%▀▀▀▀▀▀▀▀▀▀▀▀
                        `
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%%▄██████████████████████▄
                            %%%▄██████████████████████████▄
                            %▄██████████████████████████████▄
                            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            █████▀▀▀
                            ▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%▄▄▄▄▄▄▄▄▄▄▄
                            ▄▄███████████▀
                        `
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ▄████████████████▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            ▄▄▄▄▄▄▄▄▄▄▄
                            %▀███████████▄▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            ▀████████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄████████▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ╼╾
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▄▄██████▀▀
                        `,
                    },
                ],
            },

            exit: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -28, y: 7 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 7 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -25, y: 4 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 7, y: 4 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 39, y: 4 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -7, y: 14 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 3, y: 9 },
                    },
                    p2_2: {
                        artIndex: 2,
                        drawAt: { x: 16, y: 9 },
                    },
                    p2_3: {
                        artIndex: 3,
                        drawAt: { x: 30, y: 9 },
                    },
                    p2_4: {
                        artIndex: 3,
                        drawAt: { x: 42, y: 10 },
                    },
                    p3_0: {
                        artIndex: 4,
                        drawAt: { x: -9, y: 15 },
                    },
                    p3_1: {
                        artIndex: 4,
                        drawAt: { x: -3, y: 11 },
                    },
                    p3_2: {
                        artIndex: 4,
                        drawAt: { x: 8, y: 11 },
                    },
                    p3_3: {
                        artIndex: 5,
                        drawAt: { x: 20, y: 11 },
                    },
                    p3_4: {
                        artIndex: 6,
                        drawAt: { x: 29, y: 11 },
                    },
                    p3_5: {
                        artIndex: 6,
                        drawAt: { x: 36, y: 11 },
                    },
                    p3_6: {
                        artIndex: 6,
                        drawAt: { x: 46, y: 12 },
                    },
                    p4_0: {
                        artIndex: 7,
                        drawAt: { x: 2, y: 12 },
                    },
                    p4_1: {
                        artIndex: 7,
                        drawAt: { x: 7, y: 12 },
                    },
                    p4_2: {
                        artIndex: 7,
                        drawAt: { x: 12, y: 12 },
                    },
                    p4_3: {
                        artIndex: 7,
                        drawAt: { x: 17, y: 12 },
                    },
                    p4_4: {
                        artIndex: 7,
                        drawAt: { x: 22, y: 12 },
                    },
                    p4_5: {
                        artIndex: 7,
                        drawAt: { x: 26, y: 12 },
                    },
                    p4_6: {
                        artIndex: 7,
                        drawAt: { x: 30, y: 12 },
                    },
                    p4_7: {
                        artIndex: 7,
                        drawAt: { x: 35, y: 12 },
                    },
                    p4_8: {
                        artIndex: 7,
                        drawAt: { x: 40, y: 12 },
                    },
                    p5_0: {
                        artIndex: 8,
                        drawAt: { x: 14, y: 13 },
                    },
                    p5_1: {
                        artIndex: 8,
                        drawAt: { x: 16, y: 13 },
                    },
                    p5_2: {
                        artIndex: 8,
                        drawAt: { x: 18, y: 13 },
                    },
                    p5_3: {
                        artIndex: 8,
                        drawAt: { x: 20, y: 13 },
                    },
                    p5_4: {
                        artIndex: 8,
                        drawAt: { x: 22, y: 13 },
                    },
                    p5_5: {
                        artIndex: 8,
                        drawAt: { x: 24, y: 13 },
                    },
                    p5_6: {
                        artIndex: 8,
                        drawAt: { x: 26, y: 13 },
                    },
                    p5_7: {
                        artIndex: 8,
                        drawAt: { x: 28, y: 13 },
                    },
                    p5_8: {
                        artIndex: 8,
                        drawAt: { x: 30, y: 13 },
                    },
                    p5_9: {
                        artIndex: 8,
                        drawAt: { x: 32, y: 13 },
                    },
                    p5_10: {
                        artIndex: 8,
                        drawAt: { x: 34, y: 13 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%%%%▄▄▄▄
                            %%%%%%%%%%██
                            ▀██▄%%%%%%██
                            %%%▀██▄%%%██
                            %%%%%%▀██▄▄▀
                            %%%%%%%%%▀██▄
                            %%%%%%%%%% ▀██▄
                            %%%%%%%%%%▄ %▀██▄
                            %%%%%%%%%%██%%%▀██▄%▄█
                            %%%%%%%%%%██%%%%▄████▀
                            %%%%%%%%%%██%%%▀▀█████
                            %%%%%%%%%%██%%%%%%%%▀▀
                            %%%%%%%%%%██
                            %%%%%%%%%%██
                            %%%%%%%%%%██
                            %%%%%%%%%%▀▀
                            %%%%%%▄▀▀▀▀▀▀▀▀██████████████▄
                            %%%%▄█████████ ▀▀▀▀▀▀▀▀▀▀██████▄
                            %%▄█████████▀▄ ███████▀▄ ████████▄
                            %▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%%▗▄▖
                            %%%▝▚▖█
                            %%%%%▝█
                            %%%%%%█▚
                            %%%%%%█%▚▐▖
                            %%%%%%█▝▀█▌
                            %%%%%%█
                            %%%%%%█
                            %%%%▄▄▄▄▄▄▄▄▄▄▄
                            ▄▄███████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%▗▄▖
                            %%▝▚▖█
                            %%%%▝█
                            %%%%%█▚
                            %%%%%█%▚▐▖
                            %%%%%█▝▀█▌
                            %%%%%█
                            %%%%%█
                            %%▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                            ▄████████████████▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%▗▄▖
                            ▝▚▖█
                            %%▝█
                            %%%█▚
                            %%%█%▚▐▖
                            %%%█▝▀█▌
                            %%%█
                            %%%█
                            %%▄▄▄▄▄▄▄▄▄▄▄
                            %%%▀███████████▄▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%╲▂▖
                            %%%▐╲
                            %%%▐%╲▖
                            %%%▐%▀▘
                            %%%▝
                            ████████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %╲▂▖
                            %%▐╲
                            %%▐%╲▖
                            %%▐%▀▘
                            %%▝
                            ▄████████▄
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                          ╲▂▖
                          %▐╲
                          %▐%╲▖
                          %▐%▀▘
                          %▝
                          ▀████████████
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %┬
                            %│╲▎
                            %│▔
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ↘
                            ╼╾
                        `,
                    },
                ],
            },

            treasureChest: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -19, y: 22 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 48, y: 22 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: 0, y: -14 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 14, y: 16 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 16 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -8, y: 15 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 4, y: 16 },
                    },
                    p2_2: {
                        artIndex: 2,
                        drawAt: { x: 20, y: 16 },
                    },
                    p2_3: {
                        artIndex: 2,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 36, y: 16 },
                    },
                    p2_4: {
                        artIndex: 2,
                        drawOptions: { flippedX: true },
                        drawAt: { x: 46, y: 16 },
                    },
                    p3_0: {
                        artIndex: 3,
                        drawAt: { x: -3, y: 15 },
                    },
                    p3_1: {
                        artIndex: 3,
                        drawAt: { x: 2, y: 15 },
                    },
                    p3_2: {
                        artIndex: 3,
                        drawAt: { x: 13, y: 15 },
                    },
                    p3_3: {
                        artIndex: 3,
                        drawAt: { x: 23, y: 15 },
                    },
                    p3_4: {
                        artIndex: 3,
                        drawAt: { x: 33, y: 15 },
                    },
                    p3_5: {
                        artIndex: 3,
                        drawAt: { x: 39, y: 15 },
                    },
                    p3_6: {
                        artIndex: 3,
                        drawAt: { x: 46, y: 15 },
                    },
                    p4_0: {
                        artIndex: 4,
                        drawAt: { x: 6, y: 14 },
                    },
                    p4_1: {
                        artIndex: 4,
                        drawAt: { x: 11, y: 14 },
                    },
                    p4_2: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 14 },
                    },
                    p4_3: {
                        artIndex: 4,
                        drawAt: { x: 21, y: 14 },
                    },
                    p4_4: {
                        artIndex: 4,
                        drawAt: { x: 24, y: 14 },
                    },
                    p4_5: {
                        artIndex: 4,
                        drawAt: { x: 28, y: 14 },
                    },
                    p4_6: {
                        artIndex: 4,
                        drawAt: { x: 33, y: 14 },
                    },
                    p4_7: {
                        artIndex: 4,
                        drawAt: { x: 38, y: 14 },
                    },
                    p4_8: {
                        artIndex: 4,
                        drawAt: { x: 43, y: 14 },
                    },
                    p5_0: {
                        artIndex: 5,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 5,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 5,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 5,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 5,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 5,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 5,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 5,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 5,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 5,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 5,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %▄██████████████████▄
                            █▀   █          █   ▀█
                            █    █          █    █
                            █▀▀▀▀█▀▀▀▀██▀▀▀▀█▀▀▀▀█
                            █    █    ▀▀    █    █
                            █    █          █    █
                            █▄▄▄▄█▄▄▄▄▄▄▄▄▄▄█▄▄▄▄█
                        `,
                    },
                    {
                        data: `
                            ▄▀▀▀▀▀▀█▀▄
                            █▀▀██▀▀█▄█
                            █      █ █
                            ▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        data: `
                            ▄▀▀▀▀▀▀▀▀▄
                            █▀▀▀██▀▀▀█
                            █        █
                            ▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        data: `
                            ▞▜▛▚
                            ▙▄▄▟
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▆▆
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ▗▖
                        `,
                    },
                ],
            },

            merchant: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -13, y: 14 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 39, y: 14 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -13, y: 12 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 16, y: 10 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 33, y: 10 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -7, y: 11 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 4, y: 10 },
                    },
                    p2_2: {
                        artIndex: 1,
                        drawAt: { x: 20, y: 10 },
                    },
                    p2_3: {
                        artIndex: 1,
                        drawAt: { x: 32, y: 10 },
                    },
                    p2_4: {
                        artIndex: 1,
                        drawAt: { x: 43, y: 11 },
                    },
                    p3_0: {
                        artIndex: 2,
                        drawAt: { x: -5, y: 13 },
                    },
                    p3_1: {
                        artIndex: 2,
                        drawAt: { x: 0, y: 12 },
                    },
                    p3_2: {
                        artIndex: 2,
                        drawAt: { x: 11, y: 12 },
                    },
                    p3_3: {
                        artIndex: 2,
                        drawAt: { x: 22, y: 12 },
                    },
                    p3_4: {
                        artIndex: 2,
                        drawAt: { x: 27, y: 12 },
                    },
                    p3_5: {
                        artIndex: 2,
                        drawAt: { x: 34, y: 12 },
                    },
                    p3_6: {
                        artIndex: 2,
                        drawAt: { x: 46, y: 14 },
                    },
                    p4_0: {
                        artIndex: 3,
                        drawAt: { x: 4, y: 13 },
                    },
                    p4_1: {
                        artIndex: 3,
                        drawAt: { x: 9, y: 13 },
                    },
                    p4_2: {
                        artIndex: 3,
                        drawAt: { x: 14, y: 13 },
                    },
                    p4_3: {
                        artIndex: 3,
                        drawAt: { x: 19, y: 13 },
                    },
                    p4_4: {
                        artIndex: 3,
                        drawAt: { x: 24, y: 13 },
                    },
                    p4_5: {
                        artIndex: 3,
                        drawAt: { x: 28, y: 13 },
                    },
                    p4_6: {
                        artIndex: 3,
                        drawAt: { x: 32, y: 13 },
                    },
                    p4_7: {
                        artIndex: 3,
                        drawAt: { x: 37, y: 13 },
                    },
                    p4_8: {
                        artIndex: 3,
                        drawAt: { x: 42, y: 13 },
                    },
                    p5_0: {
                        artIndex: 4,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 4,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 4,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 4,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 4,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 4,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 4,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 4,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 4,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 4,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%%█▀▄▄
                            %%%%%%%%▌  ▀▀▄▀
                            %%%%%%%▄▄▄▀▀▀
                            %%%%%%▀▄    ▀▀▀
                            %%%%%▄▀    █▄
                            %%%%%█      █
                            %%%%%█      ▀█%%%▄▀
                            %%%%█       ▀▄▄▄▀
                            %%%%█        ▄▀
                            %%%▀▄▄▄▀▀▀▄▄▀
                            %%%%%%█  ▄▀█
                            %%%%%%█ █▀  ▀▄
                            ▀%▀▀%▀▀▀▀▀▀▀▀▀▀▀%%▀
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%█▄
                            %%%█▄██▀
                            %%▀▀   ▀
                            %%█   █
                            %█     █%▄▀
                            █      ▄▀
                            %▀▄▀▀▄█
                            %%█ █  █
                            %▀▀▀▀▀▀▀▀▀▀
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            %%▟▄▂
                            %▝▛▀▂
                            %▞ ▚%%╱
                            ▝▚▁▁▀╱
                            %%▌▙╱
                        `,
                    },
                    {
                        data: `
                            ☻
                            ╦╱
                            ╫
                        `,
                    },
                    {
                        data: `
                            ♣
                        `,
                    },
                ],
            },

            gambler: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -14, y: 15 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 13 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -13, y: 12 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 17, y: 12 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 36, y: 12 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -7, y: 14 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 3, y: 13 },
                    },
                    p2_2: {
                        artIndex: 1,
                        drawAt: { x: 19, y: 13 },
                    },
                    p2_3: {
                        artIndex: 1,
                        drawAt: { x: 33, y: 13 },
                    },
                    p2_4: {
                        artIndex: 1,
                        drawAt: { x: 44, y: 14 },
                    },
                    p3_0: {
                        artIndex: 2,
                        drawAt: { x: -3, y: 14 },
                    },
                    p3_1: {
                        artIndex: 2,
                        drawAt: { x: 1, y: 13 },
                    },
                    p3_2: {
                        artIndex: 2,
                        drawAt: { x: 11, y: 13 },
                    },
                    p3_3: {
                        artIndex: 2,
                        drawAt: { x: 22, y: 13 },
                    },
                    p3_4: {
                        artIndex: 2,
                        drawAt: { x: 28, y: 13 },
                    },
                    p3_5: {
                        artIndex: 2,
                        drawAt: { x: 35, y: 13 },
                    },
                    p3_6: {
                        artIndex: 2,
                        drawAt: { x: 46, y: 14 },
                    },
                    p4_0: {
                        artIndex: 3,
                        drawAt: { x: 3, y: 14 },
                    },
                    p4_1: {
                        artIndex: 3,
                        drawAt: { x: 8, y: 14 },
                    },
                    p4_2: {
                        artIndex: 3,
                        drawAt: { x: 13, y: 14 },
                    },
                    p4_3: {
                        artIndex: 3,
                        drawAt: { x: 18, y: 14 },
                    },
                    p4_4: {
                        artIndex: 3,
                        drawAt: { x: 23, y: 14 },
                    },
                    p4_5: {
                        artIndex: 3,
                        drawAt: { x: 27, y: 14 },
                    },
                    p4_6: {
                        artIndex: 3,
                        drawAt: { x: 31, y: 14 },
                    },
                    p4_7: {
                        artIndex: 3,
                        drawAt: { x: 36, y: 14 },
                    },
                    p4_8: {
                        artIndex: 3,
                        drawAt: { x: 41, y: 14 },
                    },
                    p5_0: {
                        artIndex: 4,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 4,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 4,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 4,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 4,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 4,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 4,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 4,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 4,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 4,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%%%▄%▄
                            ▌%%%%%%%█▀▄▀▄
                            █%%%%%%▄▀  ▀▀▀▀▄
                            █%%%%%█      ╼╸ ▀▀▄
                            █%%%%▄▀       ▄▄▄▄▄▀
                            █%%%█      ▀█▀
                            █%%█     ▀▀▄▄▀▄
                            █%%█         ▀██▄
                            %█▄█          █
                            %%▀▄▄▄▄▄▄▄▄▄▄▀
                            %%%%%▀▀▀%%%▀▀▀▀
                            %
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            ▌%%%█▄█▄
                            █%%%█  ╼▀▀▄
                            █%%█   ▄▀▀▀
                            ▀▄█   ▀▀█▀
                            %%▀▄▄▄▄▄▀
                            %%%▀▀%%▀▀
                        `,
                    },
                    {
                        transparentCharacter: '%',
                        data: `
                            ▌%▙▙▂
                            ▌▟█▞▀▀
                            ▚▜██▞
                            %▀%▀
                        `,
                    },
                    {
                        data: `
                            ▌▙▖
                            ▝▀
                        `,
                    },
                    {
                        data: `
                            ♠
                        `,
                    },
                ],
            },

            crater: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -28, y: 23 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 23 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -25, y: 20 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 7, y: 20 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 39, y: 20 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -7, y: 22 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 3, y: 17 },
                    },
                    p2_2: {
                        artIndex: 1,
                        drawAt: { x: 16, y: 17 },
                    },
                    p2_3: {
                        artIndex: 1,
                        drawAt: { x: 30, y: 17 },
                    },
                    p2_4: {
                        artIndex: 1,
                        drawAt: { x: 42, y: 22 },
                    },
                    p3_0: {
                        artIndex: 2,
                        drawAt: { x: -9, y: 19 },
                    },
                    p3_1: {
                        artIndex: 2,
                        drawAt: { x: -3, y: 15 },
                    },
                    p3_2: {
                        artIndex: 2,
                        drawAt: { x: 8, y: 15 },
                    },
                    p3_3: {
                        artIndex: 2,
                        drawAt: { x: 20, y: 15 },
                    },
                    p3_4: {
                        artIndex: 2,
                        drawAt: { x: 29, y: 15 },
                    },
                    p3_5: {
                        artIndex: 2,
                        drawAt: { x: 36, y: 15 },
                    },
                    p3_6: {
                        artIndex: 2,
                        drawAt: { x: 46, y: 19 },
                    },
                    p4_0: {
                        artIndex: 3,
                        drawAt: { x: 2, y: 14 },
                    },
                    p4_1: {
                        artIndex: 3,
                        drawAt: { x: 7, y: 14 },
                    },
                    p4_2: {
                        artIndex: 3,
                        drawAt: { x: 12, y: 14 },
                    },
                    p4_3: {
                        artIndex: 3,
                        drawAt: { x: 17, y: 14 },
                    },
                    p4_4: {
                        artIndex: 3,
                        drawAt: { x: 22, y: 14 },
                    },
                    p4_5: {
                        artIndex: 3,
                        drawAt: { x: 26, y: 14 },
                    },
                    p4_6: {
                        artIndex: 3,
                        drawAt: { x: 30, y: 14 },
                    },
                    p4_7: {
                        artIndex: 3,
                        drawAt: { x: 35, y: 14 },
                    },
                    p4_8: {
                        artIndex: 3,
                        drawAt: { x: 40, y: 14 },
                    },
                    p5_0: {
                        artIndex: 4,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 4,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 4,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 4,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 4,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 4,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 4,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 4,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 4,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 4,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%%%▄▄▄▄████████████▄▄▄▄
                            %%%%%▄████▛██▞█▞██▟▛▟██▚█▜████▄
                            %%%%▀██▟███▛███▀▀▀▀▀▀██▜███▟███▀
                            %%%%%%▀▀▀▀████████████████▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%▃▄▄▄▄▄▄▄▄▃
                            %▀▀████▄▄▄▄████▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %▁▂▂▂▂▂▂▁
                            ▀████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %▂▂▂▂
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ╼╾
                        `,
                    },
                ],
            },

            bloodyCrater: {
                positions: {
                    p0_0: {
                        artIndex: 0,
                        drawAt: { x: -28, y: 23 },
                    },
                    p0_2: {
                        artIndex: 0,
                        drawAt: { x: 45, y: 23 },
                    },
                    p1_0: {
                        artIndex: 0,
                        drawAt: { x: -25, y: 20 },
                    },
                    p1_1: {
                        artIndex: 0,
                        drawAt: { x: 7, y: 20 },
                    },
                    p1_2: {
                        artIndex: 0,
                        drawAt: { x: 39, y: 20 },
                    },
                    p2_0: {
                        artIndex: 1,
                        drawAt: { x: -7, y: 22 },
                    },
                    p2_1: {
                        artIndex: 1,
                        drawAt: { x: 3, y: 17 },
                    },
                    p2_2: {
                        artIndex: 1,
                        drawAt: { x: 16, y: 17 },
                    },
                    p2_3: {
                        artIndex: 1,
                        drawAt: { x: 30, y: 17 },
                    },
                    p2_4: {
                        artIndex: 1,
                        drawAt: { x: 42, y: 22 },
                    },
                    p3_0: {
                        artIndex: 2,
                        drawAt: { x: -9, y: 19 },
                    },
                    p3_1: {
                        artIndex: 2,
                        drawAt: { x: -3, y: 15 },
                    },
                    p3_2: {
                        artIndex: 2,
                        drawAt: { x: 8, y: 15 },
                    },
                    p3_3: {
                        artIndex: 2,
                        drawAt: { x: 20, y: 15 },
                    },
                    p3_4: {
                        artIndex: 2,
                        drawAt: { x: 29, y: 15 },
                    },
                    p3_5: {
                        artIndex: 2,
                        drawAt: { x: 36, y: 15 },
                    },
                    p3_6: {
                        artIndex: 2,
                        drawAt: { x: 46, y: 19 },
                    },
                    p4_0: {
                        artIndex: 3,
                        drawAt: { x: 2, y: 14 },
                    },
                    p4_1: {
                        artIndex: 3,
                        drawAt: { x: 7, y: 14 },
                    },
                    p4_2: {
                        artIndex: 3,
                        drawAt: { x: 12, y: 14 },
                    },
                    p4_3: {
                        artIndex: 3,
                        drawAt: { x: 17, y: 14 },
                    },
                    p4_4: {
                        artIndex: 3,
                        drawAt: { x: 22, y: 14 },
                    },
                    p4_5: {
                        artIndex: 3,
                        drawAt: { x: 26, y: 14 },
                    },
                    p4_6: {
                        artIndex: 3,
                        drawAt: { x: 30, y: 14 },
                    },
                    p4_7: {
                        artIndex: 3,
                        drawAt: { x: 35, y: 14 },
                    },
                    p4_8: {
                        artIndex: 3,
                        drawAt: { x: 40, y: 14 },
                    },
                    p5_0: {
                        artIndex: 4,
                        drawAt: { x: 14, y: 14 },
                    },
                    p5_1: {
                        artIndex: 4,
                        drawAt: { x: 16, y: 14 },
                    },
                    p5_2: {
                        artIndex: 4,
                        drawAt: { x: 18, y: 14 },
                    },
                    p5_3: {
                        artIndex: 4,
                        drawAt: { x: 20, y: 14 },
                    },
                    p5_4: {
                        artIndex: 4,
                        drawAt: { x: 22, y: 14 },
                    },
                    p5_5: {
                        artIndex: 4,
                        drawAt: { x: 24, y: 14 },
                    },
                    p5_6: {
                        artIndex: 4,
                        drawAt: { x: 26, y: 14 },
                    },
                    p5_7: {
                        artIndex: 4,
                        drawAt: { x: 28, y: 14 },
                    },
                    p5_8: {
                        artIndex: 4,
                        drawAt: { x: 30, y: 14 },
                    },
                    p5_9: {
                        artIndex: 4,
                        drawAt: { x: 32, y: 14 },
                    },
                    p5_10: {
                        artIndex: 4,
                        drawAt: { x: 34, y: 14 },
                    },
                },
                art: [
                    {
                        transparentCharacter: '%',
                        data: `
                            %%%%%%▘%▄▄▄▄████████████▄▄▄▄%▘
                            %%%%%▄██▘ ▀▝▞██▟▛██▛██▀████▀██▄▗
                            %%%%▀███▖ ▄▗▚██▀▀▀▀▀▀█▀▄▄▄▄▀███▀
                            %%%▝%%▀▀▀▀████▟████▟██████▀▀▀▀%%▗
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %%%%▃▄▄▄▄▄▄▄▄▃
                            %▀▀████▄▄▄▄████▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %▁▂▂▂▂▂▂▁
                            ▀████████▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        transparentCharacter: '%',
                        data: `
                            %▂▂▂▂
                            ▀▀▀▀▀▀
                        `,
                    },
                    {
                        automaskBlockCharacters: true,
                        data: `
                            ╼╾
                        `,
                    },
                ],
            },
        };

        const enemyArt = {
            snailSentinel: {
                drawAt: { x: 19, y: 21 },
                data: `
                       ___   |_|
                      /   \\_/@ @
                    __\\_______^/
                `,
            },
            stupidDog: {
                drawAt: { x: 22, y: 13 },
                data: `
                    /\\__/\\
                    |@  @|
                    |(00)|
                     )vv(
                `,
            },
            keeperOfTheToiletBowl: {
                drawAt: { x: 13, y: 15 },
                data: `
                      _______
                     |       |
                     |_______|=)
                    -----------         ^
                    |         |    O____|
                    \\_________/   /|    |
                       |   |       |    |
                       |___|      / \\   |
                `,
            },
            mysteriousScooter: {
                drawAt: { x: 15, y: 17 },
                data: `
                           [~~]=====[~~]
                                ||
                                ||
                                ||
                                ||
                    (O)======(O)===O)
                `,
            },
            badassFlamingSkeleton: {
                drawAt: { x: 10, y: 11 },
                data: `
                          |\\ |\\ |\\ |\\ |\\ /| /|
                              _______         /|
                        |\\   /   \\   \\      /|
                      |\\     | [ ]  [ ]        /|
                        |\\   |        |          /|
                             \\ \\=====/     //   /|
                     |\\       \\______\\    ()/    /|
                      |\\       ||        //   /|
                         O==[==||==]====O      /|
                    |\\   || [==||==]       /| /|
                      |\\ () [==||==]  /|  /| /|
                `,
            },
            wangRat: {
                drawAt: { x: 11, y: 18 },
                data: `
                       ______
                    (|/      \\|)
                      \\O    o/___________________
                     --\\-()-/--        __|__|__|_\\
                        \\__/__________/
                        _|  _|  _|  _|
                `,
            },
            fridgeOfForgottenLeftovers: {
                drawAt: { x: 17, y: 13 },
                data: `
                         ___.---+.
                    .--''       | '.
                    |           |  |
                    |     ______|  |
                    |----'      |  |
                    |       [==]|  |
                    |           |  |
                    |           |  |
                    |___        |  |
                        '---.___|.-'
                `,
            },
            lughead: {
                drawAt: { x: 19, y: 15 },
                data: `
                        .--.
                        |oO|
                     ..-\\TT/-..
                    '          '
                    ( )      ( )
                    ( |------| )
                    'W . || . W'
                      (__)(__)
                `,
            },
            pissedOffPoultry: {
                drawAt: { x: 17, y: 16 },
                data: `
                    .        .--.
                    |\\      .-:;
                    : \\    < O |'
                     \\ \\   ;    '.
                      \\/\\-(    (. '
                      (_)/ -_    ' ;
                             '-; ;
                            /|\\/|\\
                `,
            },
            krampusElf: {
                drawAt: { x: 20, y: 16 },
                data: `
                         *
                        / \\
                    .-./___\\.-.
                     \\/ o o \\/
                     (__(_)__)
                       / : \\
                      (_|-|_)
                      (__|__)
                `,
            },
            mimic: {
                drawAt: { x: 5, y: 14 },
                data: `
                     ______________
                    /    \\      /  \\
                    |  ((O)    ((O)|     __________
                    |______________|    (________(O) - - - -
                    |    /VVVVV\\   |=====[/\\/]
                    |    \\ | | /   |      [ ]
                    \\______| |_____/
                            \\|
                `,
            },
        };

        const sceneRenderer = {
            displayWidth: 50,
            displayHeight: 28,
            viewDepth: 5,

            render: (x, y, direction) => {
                const view = sceneRenderer.getView(x, y, direction);
                const layerClasses = sceneRenderer.getLayerClasses();
                let scene = '';

                for (let depth = view.length - 1; depth >= 0; depth--) {
                    let sceneLayer = Array.from({ length: sceneRenderer.displayHeight }, () =>
                        Array.from({ length: sceneRenderer.displayWidth }, () => ' ')
                    );

                    for (let i = 0; i < view[depth].length; i++) {
                        // Render the scene from the sides towards the middle
                        const index = i % 2 === 0 ? i - (i / 2) : view[depth].length - Math.floor(i / 2) - 1;
                        sceneLayer = sceneRenderer.draw(sceneLayer, view[depth][index], depth, index);
                    }

                    scene +=
                        `<div class="${layerClasses}">` +
                            sceneLayer.map(row => row.join('')).join('\n') +
                        '</div>';
                }

                return scene;
            },

            getLayerClasses: () => {
                const layerClasses = ['layer'];
                if (player.enteringCombat) {
                    layerClasses.push('darkening');
                } else if (player.leavingCombat) {
                    layerClasses.push('lightening');
                } else if (player.inCombat) {
                    layerClasses.push('dark');
                }

                return layerClasses.join(' ');
            },

            getView: (x, y, direction) => {
                const grid = [];

                const directionVectors = {
                    N: { dx: 0, dy: -1, lateral: { dx: 1, dy: 0 }, flip: 1 },
                    S: { dx: 0, dy: 1, lateral: { dx: 1, dy: 0 }, flip: -1 },
                    E: { dx: 1, dy: 0, lateral: { dx: 0, dy: 1 }, flip: 1 },
                    W: { dx: -1, dy: 0, lateral: { dx: 0, dy: 1 }, flip: -1 }
                };

                const dir = directionVectors[direction];
                if (!dir) {
                    console.error("Invalid direction");
                    return [];
                }

                for (let depth = 0; depth <= sceneRenderer.viewDepth; depth++) {
                    const row = [];
                    const offsetStart = depth === 0 ? -1 : -depth;
                    const offsetEnd = depth === 0 ? 1 : depth;

                    for (let offset = offsetStart; offset <= offsetEnd; offset++) {
                        const lateralOffset = offset * dir.flip;
                        const tx = x + dir.dx * depth + dir.lateral.dx * lateralOffset;
                        const ty = y + dir.dy * depth + dir.lateral.dy * lateralOffset;
                        row.push(MAP[ty]?.[tx] ?? null);
                    }

                    grid.push(row);
                }

                return grid;
            },

            draw: (scene, subject, depth, index) => {
                if (typeof subject?.isVisible === 'function' && !subject.isVisible()) {
                    return scene;
                }

                const entityName = sceneRenderer.getEntityName(subject);
                const key = `p${depth}_${index}`;
                const entry = sceneArt[entityName]?.positions?.[key] || null;
                if (!entry) {
                    return scene;
                }

                const indexedArt = sceneArt[entityName].art[entry.artIndex] || null;
                if (!indexedArt) {
                    return scene;
                }

                const art = sceneRenderer.formatArt(indexedArt);
                const transparentCharacter = indexedArt.transparentCharacter || null;
                const className = `class="scene_character_${entityName}"`;
                const longestLine = Math.max(...art.split("\n").map((l) => l.length)) - 1;

                const drawOptions = {
                    flippedX: entry?.drawOptions?.flippedX || false,
                };

                let xPosition = entry.drawAt.x + (drawOptions.flippedX ? longestLine : 0);
                let yPosition = entry.drawAt.y;

                for (character of art) {
                    if (character === "\n") {
                        xPosition = entry.drawAt.x + (drawOptions.flippedX ? longestLine : 0);
                        yPosition++;
                        continue;
                    }

                    // Draw only if in bounds
                    if (typeof scene[yPosition]?.[xPosition] !== 'undefined') {
                        if (character !== transparentCharacter) {
                            const automask =
                                (indexedArt?.automaskBlockCharacters || false) &&
                                [
                                    '▀', '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█',
                                    '▉', '▊', '▋', '▌', '▍', '▎', '▏', '▐', '▔',
                                    '▕', '▖', '▗', '▘', '▙', '▚', '▛', '▜', '▝',
                                    '▞', '▟'
                                ].includes(character);

                            // TODO: Fix this weird logic. This works best for
                            // walls, but isn't great for floors or much else
                            const style = automask ? '' : ' style="background-color:#000"';
                            scene[yPosition][xPosition] =
                                `<span ${className}${style}>${character}</span>`;
                        }
                    }

                    xPosition += drawOptions.flippedX ? -1 : 1;
                }

                return scene;
            },

            getEntityName: (entity) => {
                if (entity?.type === 'mimic') {
                    return 'treasureChest';
                }

                return entity?.type || 'void';
            },

            formatArt: (art) => {
                // Trim any whitespace from the template literal
                const formattedArt = art.data.replace(/^ *\n|\n *$/g, '');
                const lines = formattedArt.split("\n");
                const shortestLeadingWhitespace = Math.min(...lines.map((line) => line.match(/^ +/)[0].length));
                const trimmedArt = lines.map((line) => line.substr(shortestLeadingWhitespace)).join("\n");

                return (
                    typeof art.spaceBoundaryCharacter !== 'undefined'
                        ? trimmedArt.replaceAll(art.spaceBoundaryCharacter, ' ')
                        : trimmedArt
                );
            },

            drawEnemyLayer: (enemyId) => {
                const indexedArt = enemyArt[enemyId] || null;
                if (!indexedArt) {
                    console.error("Could not find enemy art entry", { enemyId });
                    return null;
                }

                const art = sceneRenderer.formatArt(indexedArt);
                let xPosition = indexedArt.drawAt.x;
                let yPosition = indexedArt.drawAt.y;

                let enemyLayer = Array.from({ length: sceneRenderer.displayHeight }, () =>
                    Array.from({ length: sceneRenderer.displayWidth }, () => ' ')
                );

                for (character of art) {
                    if (character === "\n") {
                        xPosition = indexedArt.drawAt.x;
                        yPosition++;
                        continue;
                    }

                    // Draw only if in bounds
                    if (typeof enemyLayer[yPosition]?.[xPosition] !== 'undefined') {
                        enemyLayer[yPosition][xPosition] = `<span>${character}</span>`;
                    }

                    xPosition++;
                }

                const joinedArt = enemyLayer.map(row => row.join('')).join('\n');
                return `<div class="layer enemy">${joinedArt}</div>`;
            },
        };

        class MapCell {
            constructor(type = "floor", options = {}) {
                const defaults = MapCell.defaultsByType(type);
                this.type = type;
                this.mapCharacter = options?.mapCharacter || defaults.mapCharacter;
                this.isSolid = options?.isSolid || defaults.isSolid;
                this.onEnter = options?.onEnter || defaults.onEnter;
                this.onTouch = options?.onTouch || defaults.onTouch;
                this.onExplode = options?.onExplode || defaults.onExplode;
                this.isVisible = options?.isVisible || defaults.isVisible;
            }

            static defaultsByType(type) {
                /**
                 * A MapCell can have the following properties:
                 *
                 * mapCharacter
                 *   The character that represents the tile on the minimap
                 *
                 * isSolid
                 *   If true, acts like a wall and does not allow the player to
                 *   step onto it
                 *
                 * onEnter
                 *   A function that runs when the player steps onto the tile.
                 *   Always called with its own x, y coordinates. Won't work
                 *   when isSolid = true
                 *
                 * onTouch
                 *   A function that runs when the player touches the tile.
                 *   Won't work when isSolid = false
                 *
                 * onExplode
                 *   A function that runs when the player has blasted the tile
                 *   with a brick of C4. Always called with its own x, y
                 *   coordinates
                 *
                 * isVisible
                 *   A function that determines if the tile is visible. If it
                 *   returns false, the tile appears as a generic floor instead
                 */
                const defaults = {
                    mapCharacter: "?",
                    isSolid: false,
                    onEnter: null,
                    onTouch: null,
                    onExplode: null,
                    isVisible: null,
                };

                const types = {
                    floor: {
                        mapCharacter: ".",
                    },
                    healingTile: {
                        mapCharacter: "H",
                        onEnter: (x, y) => {
                            // Heal 30% of effective max HP
                            const healAmount = Math.ceil(getEffectiveStat('maxHp') * 0.3);
                            player.heal(healAmount);
                            updateBattleLog(
                                `An oddly colored, perfectly square floor ` +
                                `tile <span class="friendly">heals you for ` +
                                `<span class="healingTile">${healAmount} HP ` +
                                `</span></span>`
                            );

                            MAP[y][x] = new MapCell();
                            render();
                        },
                    },
                    wall: {
                        mapCharacter: "#",
                        isSolid: true,
                        onExplode: (x, y) =>
                            MAP[y][x] = new MapCell(
                                Math.random() < 0.5 ? 'rubble1' : 'rubble2'
                            ),
                    },
                    rubble1: {
                        mapCharacter: ".",
                        onExplode: (x, y) => MAP[y][x] = new MapCell('rubble2'),
                    },
                    rubble2: {
                        mapCharacter: ".",
                        onExplode: (x, y) => MAP[y][x] = new MapCell('rubble1'),
                    },
                    gloryWall: {
                        mapCharacter: "#",
                        isSolid: true,
                        onTouch: () => player.say("Uh, no thanks. I'm not THAT brave"),
                        onExplode: (x, y) =>
                            MAP[y][x] = new MapCell(
                                Math.random() < 0.5 ? 'rubble1' : 'rubble2'
                            ),
                    },
                    crater: {
                        mapCharacter: ".",
                    },
                    bloodyCrater: {
                        mapCharacter: ".",
                    },
                    exit: {
                        mapCharacter: "E",
                        onEnter: () => descend(),
                    },
                    merchant: {
                        mapCharacter: "M",
                        onEnter: () => menu.open('merchant'),
                        isVisible: () =>
                            merchant.isAlive &&
                            merchant.isActiveOnFloor,
                        onExplode: (x, y) => {
                            merchant.isAlive = false;
                            merchant.isActiveOnFloor = false;
                            MAP[y][x] = new MapCell('bloodyCrater');
                            playSFX('scream');
                            merchant.say('AIEEEEEEEEEEEEEE!');
                            updateBattleLog(
                                'HOLY SHIT! The <span class="friendly">' +
                                'merchant</span> has been ' +
                                '<span class="action">vaporized</span> into ' +
                                'a bloody red mist!'
                            );
                        },
                    },
                    gambler: {
                        mapCharacter: "G",
                        onEnter: () => menu.open('gambler'),
                        isVisible: () =>
                            gambler.isAlive &&
                            gambler.isActiveOnFloor &&
                            player.bitcoins >= gambler.playPrice,
                        onExplode: (x, y) => {
                            gambler.isAlive = false;
                            gambler.isActiveOnFloor = false;
                            MAP[y][x] = new MapCell('bloodyCrater');

                            // Award between 50 and 100 BTC for the slaughter. I guess that's one way to win
                            const rewardBtc = (5 + Math.round(Math.random() * 5)) * 10;
                            player.bitcoins += rewardBtc;
                            playSFX('scream');
                            gambler.say('AUGH!!');
                            updateBattleLog(
                                `The <span class="gambler">gambler</span> ` +
                                `has been reduced to a confetti of shrapnel ` +
                                `and bone! You find <span class="BTC">` +
                                `${rewardBtc} BTC</span> among the remains. ` +
                                `Awesome!`
                            );
                        },
                    },
                    tardspireBanner: {
                        mapCharacter: ".",
                        onEnter: (x, y) => MAP[y][x] = new MapCell(),
                        onExplode: (x, y) => MAP[y][x] = new MapCell(),
                    },
                    treasureChest: {
                        mapCharacter: "T",
                        onEnter: () => menu.open("chest"),
                        onExplode: (x, y) => {
                            MAP[y][x] = new MapCell('crater');
                            updateBattleLog(
                                '<span class="action">Gee willikers, you ' +
                                'just destroyed a perfectly good treasure ' +
                                'chest! Oh well...</span><br>'
                            );
                        },
                    },
                    mimic: {
                        mapCharacter: "T",
                        onEnter: () => menu.open("chest"),
                        onExplode: (x, y) => {
                            MAP[y][x] = new MapCell('bloodyCrater');

                            // Calculate scaled BTC reward
                            const baseMimic = enemies.find(e => e.id === "mimic");
                            const scaledMimic = scaleMimicStats(baseMimic);
                            const mimicBTC = scaledMimic.bitcoins;

                            player.bitcoins += mimicBTC; // Reward the player
                            updateBattleLog(
                                `<span class="action">WHAT THE FUCK? That ` +
                                `was a mimic?!</span> You obtained ` +
                                `<span class="BTC">${mimicBTC} BTC</span> ` +
                                `from the intestines spilled from its gaping ` +
                                `maw.`
                            );
                            playSFX('scream');
                        },
                    },
                };

                return { ...defaults, ...(types[type] || {}) };
            }
        }


        const
            WIDTH = 30,
            HEIGHT = 11;
        const DIRECTIONS = ['N', 'E', 'S', 'W'];
        const DX = [0, 1, 0, -1];
        const DY = [-1, 0, 1, 0];
        let seenTiles = Array.from({
            length: HEIGHT
        }, () => Array(WIDTH).fill(false));
        let lastFloorBoostNotice = 0;

        const baseStats = {
            maxHp: 20,
            defense: 5,
            persuasion: 15,
            speed: 12,
            luck: 2,
        };
        const player = {
            x: 1,
            y: 1,
            bitcoins: 0,
            dir: 0,
            hp: baseStats.maxHp,
            maxHp: baseStats.maxHp,
            defense: baseStats.defense,
            persuasion: baseStats.persuasion,
            speed: baseStats.speed,
            luck: baseStats.luck,
            exp: 0,
            level: 1,
            inCombat: false,
            enteringCombat: false,
            leavingCombat: false,
            levelingUp: false,
            inventory: {
                canOfHamms: 2,
                cupOfLean: 2,
                torch: 2,
                brickOfC4: 2,
                dowsingRod: 2,
                fingerNail: 1, //Start game with this in inventory
                pectoralMass: 1, //Start game with this in inventory
            },
            weapon: 'fingerNail', //Start game with this equipped
            armor: 'pectoralMass', //Start game with this equipped
            ring1: null,
            ring2: null,
            movementDisabled: false,
            say: function(str) {
                updateBattleLog(`<span class="player">&lt;YOU&gt;</span> "${str}"`);
            },
            // Resets event flags that are used during rendering. Called after every render
            resetEventFlags: () => {
                player.enteringCombat = false;
                player.leavingCombat = false;
            },
            enterCombat: () => {
                player.enteringCombat = true;
                player.inCombat = true;
            },
            leaveCombat: () => {
                player.leavingCombat = true;
                player.inCombat = false;
            },
            heal: (hp) => {
                player.hp = Math.min(getEffectiveStat('maxHp'), player.hp + hp);
            }
        };

        const merchant = {
            isAlive: true,
            isActiveOnFloor: false,
            items: [],
            say: function(str) {
                updateBattleLog(`<span class="merchant">&lt;MERCHANT&gt;</span> "${str}"`);
            },
            isAt: function(x, y) {
                return (
                    merchant.isAlive &&
                    merchant.isActiveOnFloor &&
                    MAP[y][x]?.type === 'merchant'
                );
            },
            location: function() {
                if (!merchant.isAlive || !merchant.isActiveOnFloor) {
                    return null;
                }

                for (let y = 0; y < MAP.length; y++) {
                    for (let x = 0; x < MAP[y].length; x++) {
                        if (MAP[y][x]?.type === "merchant") {
                            return { x, y };
                        }
                    }
                }
                return null;
            },
            buy: function(type, key) {
                const merchandise = (type === 'item' ? items : (type === 'weapon' ? weapons : armor))?.[key];
                if (!merchandise) {
                    console.error(`${key} doesn't exist!`);
                    return;
                }

                if (player.bitcoins < merchandise.price) {
                    merchant.say('Too bad, kid. Come back when you get some coin!');
                    return;
                }

                // Prevent buying equipment you already own
                if (type !== 'item' && (player.inventory[key] > 0 || player[type] === key)) {
                    merchant.say("You already own that, stupid!");
                    return;
                }

                player.bitcoins -= merchandise.price;
                playSFX('kaching');
                // Disable equipment auto equip upon purchase
                player.inventory[key] = (player.inventory?.[key] || 0) + 1;

                const purchaseFlavorText = [
                    "HAHA! You won't regret it!",
                    "Don't forget: NO REFUNDS!",
                    "You won't find a better deal than this!",
                ];
                const merchantText = purchaseFlavorText[Math.floor(Math.random() * purchaseFlavorText.length)];
                merchant.say(merchantText);

                const merchandiseText = getArticle(merchandise.name) + merchandise.name;
                updateBattleLog(`You just bought ${merchandiseText}`);
                render();
            },
            set: function () {
                merchant.setWares();
                merchant.setPosition();
            },
            setWares: function() {
                const itemKeys = Object.keys(items);
                if (itemKeys.length === 0) {
                    console.error("No items available in the items object!");
                    return;
                }

                let attempts = 0;
                do {
                    merchant.items = [];
                    itemKeys.forEach((key) => {
                        if (Math.random() < items[key].merchantStockChance) {
                            merchant.items.push(key);
                        }
                    });

                    attempts++;
                    if (attempts > 100) {
                        console.error(
                            `Failed to generate merchant items after ` +
                            `${attempts} attempts!`
                        );
                        break;
                    }
                } while (merchant.items.length === 0);

                merchant.setRingWares();
            },

            setRingWares: function() {
                const ringKeys = Object.keys(rings);
                let attempts = 0;

                do {
                    merchant.rings = [];
                    ringKeys.forEach((key) => {
                        if (Math.random() < (rings[key].merchantStockChance || 0)) {
                            merchant.rings.push(key);
                        }
                    });
                    attempts++;
                    if (attempts > 100) {
                        break;
                    }
                } while (merchant.rings.length === 0 && ringKeys.length > 0);
            },

            setPosition: function() {
                let attempts = 0;

                do {
                    const x = Math.floor(Math.random() * WIDTH);
                    const y = Math.floor(Math.random() * HEIGHT);

                    const isEmptySpace =
                        MAP[y][x]?.type === 'floor' &&
                        (y !== player.y && x !== player.x);

                    if (isEmptySpace) {
                        MAP[y][x] = new MapCell('merchant');
                        return;
                    }
                } while (attempts++ < 1000);

                console.warn(
                    `Unable to place the merchant after ${attempts} ` +
                    `attempts. The merchant will be deactivated for this floor`
                );
                merchant.isActiveOnFloor = false;
            },
        };

        const gambler = {
            isAlive: true,
            isActiveOnFloor: false,
            selectionIndex: 0,
            options: ['gamble', 'leave'],
            playPrice: 200,
            say: function(str) {
                updateBattleLog(`<span class="gambler">&lt;GAMBLER&gt;</span> "${str}"`);
            },
            isAt: function(x, y) {
                return (
                    gambler.isAlive &&
                    gambler.isActiveOnFloor &&
                    player.bitcoins >= gambler.playPrice &&
                    MAP[y][x]?.type === 'gambler'
                );
            },
            location: function() {
                if (!gambler.isAlive || !gambler.isActiveOnFloor || player.bitcoins < gambler.playPrice) {
                    return null;
                }

                for (let y = 0; y < MAP.length; y++) {
                    for (let x = 0; x < MAP[y].length; x++) {
                        if (MAP[y][x]?.type === "gambler") {
                            return { x, y };
                        }
                    }
                }
                return null;
            },
            set: function() {
                let attempts = 0;

                do {
                    const x = Math.floor(Math.random() * WIDTH);
                    const y = Math.floor(Math.random() * HEIGHT);

                    const isMerchantSpace =
                        merchant.isActiveOnFloor &&
                        MAP[y][x]?.type === 'merchant';

                    const isEmptySpace =
                        MAP[y][x]?.type === 'floor' &&
                        (y !== player.y && x !== player.x) &&
                        !isMerchantSpace;

                    if (isEmptySpace) {
                        MAP[y][x] = new MapCell('gambler');
                        return;
                    }
                } while (attempts++ < 1000);

                console.warn(
                    `Unable to place the gambler after ${attempts} attempts. ` +
                    `The gambler will be deactivated for this floor`
                );
                gambler.isActiveOnFloor = false;
            }
        };

        const enemies = [
            {
                id: "snailSentinel",
                name: "SNAIL SENTINEL",
                hp: 10,
                attack: [1, 4],
                bitcoins: 4,
            },
            {
                id: "stupidDog",
                name: "STUPID DOG",
                hp: 6,
                attack: [2, 5],
                bitcoins: 3,
            },
            {
                id: "wangRat",
                name: "WANG RAT",
                hp: 5,
                attack: [3, 5],
                bitcoins: 2,
            },
            {
                id: "keeperOfTheToiletBowl",
                name: "KEEPER OF THE TOILET BOWL",
                hp: 15,
                attack: [3, 7],
                bitcoins: 5,
            },
            {
                id: "mysteriousScooter",
                name: "MYSTERIOUS SCOOTER",
                hp: 12,
                attack: [3, 6],
                bitcoins: 4,
            },
            {
                id: "badassFlamingSkeleton",
                name: "BADASS FLAMING SKELETON",
                hp: 13,
                attack: [4, 9],
                bitcoins: 4,
            },
            {
                id: "fridgeOfForgottenLeftovers",
                name: "FRIDGE OF FORGOTTEN LEFTOVERS",
                hp: 20,
                attack: [2, 3],
                bitcoins: 3,
            },
            {
                id: "lughead",
                name: "LUGHEAD",
                hp: 18,
                attack: [2, 6],
                bitcoins: 4,
            },
            {
                id: "pissedOffPoultry",
                name: "PISSED-OFF POULTRY",
                hp: 7,
                attack: [2, 5],
                bitcoins: 2,
            },
            {
                id: "krampusElf",
                name: "KRAMPUS ELF",
                hp: 7,
                attack: [3, 4],
                bitcoins: 4,
            },
            {
                id: "mimic",
                name: "MIMIC",
                hp: 120,
                attack: [7, 14],
                bitcoins: 100,
            },
        ];
        const defeatMessages = [
          "was beaten to a fucking pulp!",
          "had their bollocks slammed against the hard concrete wall!",
          "got their face scraped along the floor!",
          "died from a nosebleed. Alright then?",
          "was pulverized before they could activate ther anti-retard orbital laser.",
          "pancaked their diaper and died from embarassment. Gross.",
          "left the server.",
          "picked their nose, and died picking their nose.",
          "got bored and jumped down a 'bottomless' hole. You heard a scream, and the sound was absolutely not faint."
        ];

        const weapons = {
            fingerNail: {
                name: "FINGERNAIL",
                description: "Your very own fingernail! Careful not to break it!",
                damage: {
                    base: 1,
                    randomMultiplier: 4,
                },
                price: 0,
            },
            pointyStick: {
                name: "POINTY STICK",
                description: "A stick that fell off of a tree somewhere",
                damage: {
                    base: 2,
                    randomMultiplier: 5,
                },
                price: 20,
            },
            wiffleBallBat: {
                name: "WIFFLE BALL BAT",
                description: "A hollow bat made of plastic",
                damage: {
                    base: 3,
                    randomMultiplier: 6,
                },
                price: 50,
            },
            nunchucks: {
                name: "NUNCHUCKS",
                description: "Two pieces of wood connected by a chain",
                damage: {
                    base: 6,
                    randomMultiplier: 9,
                },
                price: 100,
            },
            atlatlSpear: {
                name: "ATLATL SPEAR",
                description: "A spear with a throwing lever",
                damage: {
                    base: 10,
                    randomMultiplier: 11,
                },
                price: 400,
            },
            bludgeoningMace: {
                name: "BLUDGEONING MACE",
                description: "A stick with a spikey metal ball at the end",
                damage: {
                    base: 10,
                    randomMultiplier: 14,
                },
                price: 500,
            },
            cathodeRayTubeMonitor: {
                name: "CATHODE RAY TUBE MONITOR",
                description: "A CRT monitor. Heavy as piss.",
                damage: {
                    base: 13,
                    randomMultiplier: 17,
                },
                price: 1000,
            },
            magicPencil: {
                name: "MAGIC PENCIL",
                description: "SpongeBob SquarePants - Season 2, Episode 14B - Frankendoodle",
                damage: {
                    base: 15,
                    randomMultiplier: 18,
                },
                price: 1400,
            },
            goldenWang: {
                name: "GOLDEN WANG",
                description: "With the power of the Golden Wang, the Discordian parasite shall perish!",
                damage: {
                    base: 69,
                    randomMultiplier: 69,
                },
                price: 6900,
            },
        };

        const armor = {
            pectoralMass: {
                name: "PECTORAL MASS",
                description: "Your totally big, meaty pectorals! You're not fat at all...'",
                defense: 1,
                price: 0,
            },
            graphicTee: {
                name: "GRAPHIC TEE",
                description: "A t-shirt that says 'Normal people scare me'",
                defense: 2,
                price: 20,
            },
            barrelWithSuspenders: {
                name: "BARREL (with suspenders)",
                description: "An empty barrel that sort of covers your torso and legs. Smells like whisky too!",
                defense: 3,
                price: 50,
            },
            leatherArmor: {
                name: "LEATHER ARMOR",
                description: "The finest in leather, fitted with a tight top, codpiece, cat o' nine tails... (uh, are you sure this is actually armor?)",
                defense: 6,
                price: 150,
            },
            milaneseArmor: {
                name: "MILANESE ARMOR",
                description: "A classic suit of armor. Looks kind of like a Renaissance-era Robocop",
                defense: 12,
                price: 1000,
            },
            blackPlateArmor: {
                name: "BLACK PLATE ARMOR",
                description: "Literally a giant black dinner plate. Deceptively protective.",
                defense: 16,
                price: 1500,
            },
            nokiaMail: {
                name: "NOKIA MAIL",
                description: "A Nokia branded mail. No, not like an email... more like a chainmail. But Nokia.",
                defense: 21,
                price: 2000,
            },
        };

        const rings = {
        // PRS Boosters
            ringOfSexyUnderwear: {
                name: "RING OF SEXY UNDERWEAR",
                description: "A ring with an engraving of a pair of strangely attractive undergarments. +3 PRS",
                effects: { persuasion: 3 },
                price: 60,
                merchantStockChance: 0.5,
                chestChance: 0.1,
            },

            ringOfFrenchAccent: {
                name: "FRENCHLY ACCENTED RING",
                description: "A ring that somehow magically forces you to speak in a French accent. VERY sexy! +5 PRS",
                effects: { persuasion: 5 },
                price: 100,
                merchantStockChance: 0.3,
                chestChance: 0.04,
            },

        // HP Boosters
            ringValentines: {
                name: "VALENTINES DAY RING",
                description: "A ring that was given to somebody by their Valentine... and dumped down a hole. You see 'Amy' engraved onto a heart. How sad. +5 HP",
                effects: { maxHp: 5 },
                price: 60,
                merchantStockChance: 0.5,
                chestChance: 0.07,
            },
            ringBloodstream: {
                name: "BLOODSTREAM NOSERING",
                description: "A nosering that injects blood into your veins. Sounds painful... +8 HP",
                effects: { maxHp: 8 },
                price: 100,
                merchantStockChance: 0.3,
                chestChance: 0.04,
            },
        //DEF Boosters
            ringOfHardening: {
                name: "COCKRING OF HARDENING",
                description: "A piercing for your cock that doubles as a sort of penis pill. One size fits all! +5 DEF",
                effects: { defense: 5 },
                price: 60,
                merchantStockChance: 0.4,
                chestChance: 0.07,
            },
            ringPectoralPiercing: {
                name: "PECTORAL PIERCING",
                description: "A piercing that can fit anywhere on your big, juicy pectorals. +10 DEF",
                effects: { defense: 10 },
                price: 100,
                merchantStockChance: 0.3,
                chestChance: 0.04,
            },
        // SPD Boosters
            ringPinkyToe: {
                name: "PINKY TOE RING",
                description: "A ring for your pinky toe. The only way for this to work is by putting it directly through the toenail... kinda like that SpongeBob episode! +1 SPD",
                effects: { speed: 1 },
                price: 60,
                merchantStockChance: 0.4,
                chestChance: 0.07,
            },
            ringCrack: {
                name: "CRACK INFUSED RING",
                description: "A ring infused with crack cocaine. +2 SPD",
                effects: { speed: 2 },
                price: 100,
                merchantStockChance: 0.3,
                chestChance: 0.04,
            },
        // LUK Boosters
            ringGamble: {
                name: "GAMBLER'S RING",
                description: "A cheap looking ring with a 240p image of a slot machine on it. +4 LUK",
                effects: { luck: 4 },
                price: 150,
                merchantStockChance: 0.1,
                chestChance: 0.05,
            },
            ringEscobar: {
                name: "PABLO ESCOBAR'S GOLDEN RING",
                description: "A golden ring that once belonged to Pablo Escobar. It smells rather illegal, but who give a shit? +9 LUK",
                effects: { luck: 9 },
                price: 200,
                merchantStockChance: 0.07,
                chestChance: 0.02,
            },
        // Special
            ringOfSightliness: {
                name: "RING OF SIGHTLINESS",
                description: "A ring with an eyeball so realistic looking, it could actually be real. Allows you to see better in the Tardspire",
                effects: {},
                price: 180,
                merchantStockChance: 0.2,
                chestChance: 0.0,
            },
            ringOfStinky: {
                name: "RING OF STINKY",
                description: "A ring so stinky, SO putrid, that even monsters will reconsider confronting you. Reduces encounter rate by 30%",
                effects: {},
                price: 200,
                merchantStockChance: 0.2,
                chestChance: 0.0,
            },
            ringOfAmplifiedAudio: {
                name: "RING OF AMPLIFIED AUDIO",
                description: "A ring with a tiny, yet deceptively loud megaphone. Miniphone? idk. +2 PRS and an PRS attempt",
                effects: { persuasion: 2 },
                price: 130,
                merchantStockChance: 0.2,
                chestChance: 0.00,
            },
        };

        const items = {
            canOfHamms: {
                name: "CAN OF HAMM'S",
                description: "A warm can of beer. Delicious..? Heals +5 HP",
                use: () => {
                    player.heal(5);
                    updateBattleLog("You chug the can, filling your mouth with the flavor of boiled socks. +5 HP");
                },
                merchantStockChance: 0.9,
                price: 10,
            },
            cupOfLean: {
                name: "CUP OF LEAN",
                description: "A crusty styrofoam cup filled with a strange purple syrup. Heals +20 HP",
                use: () => {
                    player.heal(20);
                    updateBattleLog("Your stomach feels nauseous, but your head feels great! +20 HP");
                },
                merchantStockChance: 0.5,
                price: 30,
            },
            glassOfToiletWater: {
                name: "GLASS OF TOILET WATER",
                description: "A glass filled to the rim with toilet water, extracted from the toilet bowl belonging to a Keeper. The glass has a rather badass sticker of a skeleton riding a motorcycle neatly applied... Heals +50 HP",
                use: () => {
                    player.heal(50);
                    updateBattleLog("Sickeningly delicious...? You question your current state of mind for a moment. +50 HP");
                },
                merchantStockChance: .4,
                price: 50,
            },
            alaskaRaisins: {
                name: "ALASKA RAISINS",
                description: "Holy shit! It's the Alaska Raisins! Heals +70 HP",
                use: () => {
                    player.heal(70);
                    playSFX('raisins');
                    updateBattleLog("The Alaska Raisins sing a lovely song about how epic igloos are as you pop them into your mouth one by one. You can still hear them singing in your stomach... +70 HP");
                },
                merchantStockChance: .35,
                price: 80,
            },
            dowsingRod: {
                name: "DOWSING ROD",
                description: "A Y-shaped stick. Reveals the exit of the current floor",
                use: () => {
                    for (let y=0; y<MAP.length; y++) {
                        for (let x=0; x<MAP[y].length; x++) {
                            if (MAP[y][x]?.type === 'exit') {
                                revealMapSpot(x, y, 1);

                                // Since there's only one exit per floor, we can render and exit early
                                updateBattleLog("The exit has been revealed!");
                                render();
                                return;
                            }
                        }
                    }
                },
                merchantStockChance: 0.8,
                price: 20,
            },
            torch: {
                name: "TORCH",
                description: "An unlit torch. Using it will reveal the map of the current floor",
                use: () => {
                    playSFX('torch');
                    seenTiles = seenTiles.map((col) => col.map(() => true));
                    updateBattleLog("Lo, the way has been made clear!");
                    animTorchStart();
                    render();
                },
                merchantStockChance: 0.8,
                price: 60,
            },
            brickOfC4: {
                name: "BRICK OF C-4",
                description: "An incendiary plastic explosive. Great for turning anything into nothing real quick",
                use: () => {
                    setTimeout(() => playSFX('explosion'), 50);
                    explosionAnimation(() => {
                        if (player.inCombat) {
                            const dmg = Math.max(20, Math.round(Math.random() * 10) * 5);
                            currentEnemy.hp -= dmg;
                            updateBattleLog(`You exploded the shit out of <span class="action">${currentEnemy.name}</span> for <span class="HP">${dmg} HP</span>!!!`);
                            if (currentEnemy.hp <= 0) {
                                playSFX('scream');
                                const nx = player.x + DX[player.dir];
                                const ny = player.y + DY[player.dir];
                                if (['floor', 'rubble1', 'rubble2'].includes(MAP[ny]?.[nx]?.type)) {
                                    MAP[ny][nx] = new MapCell('bloodyCrater');
                                }
                            }
                            endOfPlayerTurn();
                        } else {
                            let xMin = player.x, xMax = player.x,
                                yMin = player.y, yMax = player.y;

                            switch (DIRECTIONS[player.dir]) {
                                case 'N':
                                    xMin--;
                                    xMax++;
                                    yMin -= 3;
                                    break;
                                case 'E':
                                    yMin--;
                                    yMax++;
                                    xMax += 3;
                                    break;
                                case 'S':
                                    xMin--;
                                    xMax++;
                                    yMax += 3;
                                    break;
                                case 'W':
                                    yMin--;
                                    yMax++;
                                    xMin -= 3;
                                    break;
                            }

                            for (let y=yMin; y<=yMax; y++) {
                                for (let x=xMin; x<=xMax; x++) {
                                    if (MAP[y]?.[x]) {
                                        MAP[y][x]?.onExplode?.(x, y);
                                        seenTiles[y][x] = true;
                                    }
                                }
                            }

                            updateBattleLog('<span class="action">KABOOM!</span> The dungeon walls crumble like charred toast!');
                            render();
                        }
                    });
                },
                merchantStockChance: 0.5,
                price: 300,
            },
        };

        function getEffectiveStat(stat) {
            const ringsEquipped = [player.ring1, player.ring2]
                .map(ringId => ringId ? rings[ringId] : null)
                .filter(Boolean);
            return player[stat] + ringsEquipped.reduce((sum, ring) => sum + (ring.effects?.[stat] || 0), 0);
        }

        function revealMapSpot(x, y, radius) {
            for (let py=y-radius; py<=y+radius; py++) {
                for (let px=x-radius; px<=x+radius; px++) {
                    if (typeof MAP[py]?.[px] !== 'undefined') {
                        seenTiles[py][px] = true;
                    }
                }
            }
        }

        const sfx = {
            footstep: new Audio('audio/footsteps.wav'),
            turn: new Audio('audio/turn.wav'),
            attack: new Audio('audio/attack.wav'),
            run: new Audio('audio/run.wav'),
            persuade: new Audio('audio/persuade.wav'),
            explosion: new Audio('audio/explosion.mp3'),
            scream: new Audio('audio/scream.mp3'),
            kaching: new Audio('audio/kaching.mp3'),
            torch: new Audio('audio/torch.mp3'),
            gamble: new Audio('audio/gamble.mp3'),
            inventoryOpen: new Audio('audio/inventoryOpen.mp3'),
            uiOption: new Audio('audio/uiOption.wav'),
            uiSelect: new Audio('audio/uiSelect.wav'),
            uiCancel: new Audio('audio/uiCancel.wav'),
            raisins: new Audio('audio/raisins.mp3'),
        };

        const music = {
            explorationTracks: [
                new Audio("audio/explore.mp3"),
                new Audio("audio/metalspoons.mp3"), // Metal Spoons - endless_self
                new Audio("audio/tardedwarrior.mp3"), // Tarded Warrior - endless_self
            ],
            battleTracks: [
                new Audio("audio/battle1.mp3"), // battle1
                new Audio("audio/battle2.mp3"), // battle2
                new Audio("audio/battle3.mp3"), // battle3
            ],
        };

        music.explorationTracks.forEach(track => track.loop = true);
        music.battleTracks.forEach(track => track.loop = true);

        function stopAllMusic() {
            [...music.explorationTracks, ...music.battleTracks].forEach(track => {
                track.pause();
                track.currentTime = 0;
            });
        }

        function playRandomExplorationMusic() {
            stopAllMusic();
            if (!musicEnabled) return;
            const idx = Math.floor(Math.random() * music.explorationTracks.length);
            currentExplorationTrack = music.explorationTracks[idx];
            currentMusic = currentExplorationTrack;
            currentExplorationTrack.play();
        }

        function playRandomBattleMusic() {
            stopAllMusic();
            if (!musicEnabled) return;
            const idx = Math.floor(Math.random() * music.battleTracks.length);
            currentMusic = music.battleTracks[idx];
            currentMusic.play();
        }

        function resumeExplorationMusic() {
            stopAllMusic();
            if (!musicEnabled || !currentExplorationTrack) return;
            currentMusic = currentExplorationTrack;
            currentExplorationTrack.play();
        }

        let currentMusic = null;
        let currentExplorationTrack = null;
        let currentEnemy = null;
        let torchAnimActive = false;
        let party = [];
        let gameOver = false;
        let awaitingPersuasionText = false;
        let persuasionAttempts = 0;
        let maxPersuasionAttempts = 2;
        let speakingOutsideCombat = false;
        let animationActive = false;
        let battleLog = [];
        let floor = 1;
        let MAP = [];
        let exit = {
            x: WIDTH - 2,
            y: HEIGHT - 2
        };

        let musicEnabled = true;

        function generateMap() {
            setExitPosition();

            // Fill in walls
            for (let y = 0; y < HEIGHT; y++) {
                MAP[y] = [];
                for (let x = 0; x < WIDTH; x++) {
                    MAP[y][x] = new MapCell('wall');
                    seenTiles[y][x] = false;
                }
            }

            // Carve out a path
            let position = { x: player.x, y: player.y };
            let stack = null;
            do {
                stack = carvePath([position]);
            } while (stack === null);

            for (let i in stack) {
                MAP[stack[i].y][stack[i].x] = new MapCell();
            }

            for (let i = 0; i < 10; i++) {
                dissolveMap();
            }

            MAP[player.y][player.x] = new MapCell();
            MAP[exit.y][exit.x] = new MapCell('exit');

            // 100% chance to spawn merchant on floor 1
            if (floor === 1) {
                merchant.isActiveOnFloor = merchant.isAlive;
                placeWelcomeBanner();
            } else {
                merchant.isActiveOnFloor = merchant.isAlive && Math.random() < 0.35;
            }

            if (merchant.isActiveOnFloor) {
                merchant.set();
            }

            gambler.isActiveOnFloor = gambler.isAlive && Math.random() < 0.35;
            if (gambler.isActiveOnFloor) {
                gambler.set();
            }

            spawnTreasureChests();
            spawnHealingTiles();
        }

        function placeWelcomeBanner() {
            if (MAP[player.y - 1][player.x]?.type === 'floor') {
                // North of player
                MAP[player.y - 1][player.x] = new MapCell('tardspireBanner');
                player.dir = DIRECTIONS.indexOf('N');
            } else if (MAP[player.y + 1][player.x]?.type === 'floor') {
                // South of player
                MAP[player.y + 1][player.x] = new MapCell('tardspireBanner');
                player.dir = DIRECTIONS.indexOf('S');
            } else if (MAP[player.y][player.x - 1]?.type === 'floor') {
                // West of player
                MAP[player.y][player.x - 1] = new MapCell('tardspireBanner');
                player.dir = DIRECTIONS.indexOf('W');
            } else if (MAP[player.y][player.x + 1]?.type === 'floor') {
                // East of player
                MAP[player.y][player.x + 1] = new MapCell('tardspireBanner');
                player.dir = DIRECTIONS.indexOf('E');
            }

            // If there's a wall behind the player, turn it into a glory wall
            const gx = player.x - DX[player.dir];
            const gy = player.y - DY[player.dir];

            if (MAP[gy][gx]?.type === 'wall') {
                MAP[gy][gx] = new MapCell('gloryWall');
            }
        }

        function spawnTreasureChests() {
            const chestCount = Math.floor(Math.random() * 4) + 1; // 1 to 4 chests
            let attempts = 0;

            for (let i = 0; i < chestCount; i++) {
                while (attempts++ < 1000) {
                    const x = Math.floor(Math.random() * WIDTH);
                    const y = Math.floor(Math.random() * HEIGHT);

                    const isEmptySpace =
                        MAP[y][x]?.type === 'floor' &&
                        (y !== player.y || x !== player.x);

                    if (isEmptySpace) {
                        const isMimic = Math.random() < 0.2; // 20% chance for mimic
                        MAP[y][x] = new MapCell(isMimic ? 'mimic' : 'treasureChest');
                        break;
                    }
                }
            }
        }

        function spawnHealingTiles() {
            const healingTileCount = Math.floor(Math.random() * 6) + 1; // 1 to 6 healing tiles
            let attempts = 0;

            for (let i = 0; i < healingTileCount; i++) {
                while (attempts++ < 1000) {
                    const x = Math.floor(Math.random() * WIDTH);
                    const y = Math.floor(Math.random() * HEIGHT);

                    const isEmptySpace =
                        MAP[y][x]?.type === 'floor' &&
                        (y !== player.y || x !== player.x);

                    if (isEmptySpace) {
                        MAP[y][x] = new MapCell('healingTile'); // Place a healing tile
                        break;
                    }
                }
            }
        }

        function getRandomMerchantItem() {
            const availableItems = Object.keys(items).filter(itemId => items[itemId].merchantStockChance > 0);
            return availableItems[Math.floor(Math.random() * availableItems.length)];
        }

        function setExitPosition() {
            const margin = 2;
            const possiblePositions = [['x', 'y'], ['x'], ['y']];
            const positions = possiblePositions[
                Math.floor(Math.random() * possiblePositions.length)
            ];

            for (let p in positions) {
                if (positions[p] === 'x') {
                    const exitOffsetX = Math.round(Math.random() * Math.round(WIDTH / 10));
                    if (player.x < WIDTH / margin) {
                        exit.x = WIDTH - margin - exitOffsetX;
                    } else {
                        exit.x = margin + exitOffsetX;
                    }
                } else {
                    const exitOffsetY = Math.round(Math.random() * Math.round(HEIGHT / 10));
                    if (player.y < HEIGHT / margin) {
                        exit.y = HEIGHT - margin - exitOffsetY;
                    } else {
                        exit.y = margin + exitOffsetY;
                    }
                }
            }
        }

        function carvePath(stack) {
            const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';
            const step = Math.random() < 0.5 ? -1 : 1;
            let lastPosition = stack[stack.length - 1];

            for (let i=0; i<2; i++) {
                const nextPosition = {
                    x: lastPosition.x + (direction === 'horizontal' ? step : 0),
                    y: lastPosition.y + (direction === 'vertical' ? step : 0),
                };

                const atMapEdge =
                    nextPosition.x === 0 ||
                    nextPosition.y === 0 ||
                    nextPosition.x === WIDTH - 1 ||
                    nextPosition.y === HEIGHT - 1;

                if (atMapEdge) {
                    return null;
                }

                const alreadyVisited = stack.find((cell) =>
                    cell.x === nextPosition.x && cell.y === nextPosition.y
                );
                if (alreadyVisited) {
                    return null;
                }

                stack.push(nextPosition);

                const reachedEnd =
                    nextPosition.x === exit.x &&
                    nextPosition.y === exit.y;

                if (reachedEnd) {
                    return stack;
                }

                lastPosition = nextPosition;
            }

            let result;
            for (let i=0; i<100; i++) {
                result = carvePath(stack);
                if (result) {
                    break;
                }
            }

            return result;
        }

        function dissolveMap() {
            let dissolvePoints = [];
            for (let y = 2; y < HEIGHT - 2; y++) {
                for (let x = 2; x < WIDTH - 2; x++) {
                    const isDissolvePoint = MAP[y][x]?.type === 'wall' && (
                        (MAP[y - 1][x]?.type === 'wall' ? 1 : 0) +
                        (MAP[y + 1][x]?.type === 'wall' ? 1 : 0) +
                        (MAP[y][x - 1]?.type === 'wall' ? 1 : 0) +
                        (MAP[y][x + 1]?.type === 'wall' ? 1 : 0)
                    ) === 3;

                    if (isDissolvePoint) {
                        dissolvePoints.push({x, y});
                    }
                }
            }

            const totalPointsToDissolve = Math.floor(dissolvePoints.length / 2);
            if (totalPointsToDissolve < 1) {
                return;
            }

            for (let i = 0; i < totalPointsToDissolve; i++) {
                const index = Math.floor(Math.random() * dissolvePoints.length);
                const dissolvePoint = dissolvePoints[index];
                MAP[dissolvePoint.y][dissolvePoint.x] = new MapCell();
                dissolvePoints = dissolvePoints.splice(index, 1);
            }
        }

        function updateSeenTiles() {
            seenTiles[player.y][player.x] = true;
            const hasSightliness =
                (player.ring1 === "ringOfSightliness" || player.ring2 === "ringOfSightliness");

            const radius = hasSightliness ? 2 : 1; // Default reveal radius 1, 2 if Ring of Sightliness equipped

            for (let dy = -radius; dy <= radius; dy++) {
                for (let dx = -radius; dx <= radius; dx++) {
                    let nx = player.x + dx;
                    let ny = player.y + dy;
                    if (nx >= 0 && ny >= 0 && nx < WIDTH && ny < HEIGHT) {
                        seenTiles[ny][nx] = true;
                    }
                }
            }
        }

        function drawMinimap() {
            let out = '';
            for (let y = 0; y < HEIGHT; y++) {
                for (let x = 0; x < WIDTH; x++) {
                    let tile = '';
                    let tileClass = '';
                    if (x === player.x && y === player.y) {
                        const arrow = ['↑', '→', '↓', '←'][player.dir];
                        tile = arrow;
                        tileClass = 'player';
                    } else if (!seenTiles[y][x]) {
                        tile = '?';
                        tileClass = 'unexplored';
                    } else {
                        // Use a visibility function if one is available
                        // Otherwise, assume that the tile is visible
                        const isVisible = typeof MAP[y][x]?.isVisible !== 'function' || MAP[y][x].isVisible();

                        if (isVisible) {
                            tile = MAP[y][x]?.mapCharacter || '?';
                            tileClass = MAP[y][x]?.type || 'unknown';
                            tileClass = tileClass === 'mimic' ? 'treasureChest' : tileClass;
                        } else {
                            const emptyCell = new MapCell();
                            tile = emptyCell.mapCharacter;
                            tileClass = emptyCell.type;
                        }
                    }
                    out += `<span class="${tileClass}">${tile}</span>`;
                }
                out += '<br>';
            }
            document.getElementById('minimap').innerHTML = out;
        }

        function updateBattleLog(entry) {
            battleLog.push(entry);
            if (battleLog.length > 50) {
                battleLog.shift();
            }

            const logContainer = document.getElementById("battleLog");
            logContainer.innerHTML = [...battleLog]
                .slice()
                .reverse()
                .map((msg, i) => {
                    const lightness = 100 - (i * 15); // Fade effect
                    const color = `hsl(0, 0%, ${Math.max(lightness, 50)}%)`; // Prevent it from getting too dark
                    return `<div style="color: ${color};">${msg}</div>`;
                })
                .join("");
        }

        function playSFX(name) {
            if (!sfx[name]) {
                console.error("SFX not found", { name });
                return;
            }

            sfx[name].currentTime = 0;
            sfx[name].play();
        }

        function render() {
            updateSeenTiles();
            drawMinimap();

            const equippedArmor = armor[player.armor];
            const equippedRing1 = player.ring1 ? rings[player.ring1] : null;
            const equippedRing2 = player.ring2 ? rings[player.ring2] : null;

            function getRingEffect(stat) {
                return (equippedRing1?.effects?.[stat] || 0) + (equippedRing2?.effects?.[stat] || 0);
            }

            const displayMaxHp = player.maxHp + getRingEffect('maxHp');
            const displayDefense = player.defense + (equippedArmor ? equippedArmor.defense : 0) + getRingEffect('defense');
            const displayPersuasion = player.persuasion + getRingEffect('persuasion');
            const displaySpeed = player.speed + getRingEffect('speed');
            const displayLuck = player.luck + getRingEffect('luck');

            const stats1Html = `
                <div class="stats-container">
                    <span>.-STATS-.</span>
                    <span>|===<span class="HP">HP</span>===|</span>
                    <span class="stats-label">${player.hp}/${displayMaxHp}</span>
                    <span>|==<span class="DEF">DEF</span>==|</span>
                    <span class="stats-label">${displayDefense}</span>
                    <span>|==<span class="PRS">PRS</span>==|</span>
                    <span class="stats-label">${displayPersuasion}</span>
                    <span>|==<span class="SPD">SPD</span>==|</span>
                    <span class="stats-label">${displaySpeed}</span>
                    <span>|==<span class="LUK">LUK</span>==|</span>
                    <span class="stats-label">${displayLuck}</span>
                    <span>._ _ _ _.</span>
                </div>`;
            document.getElementById('stats1').innerHTML = stats1Html;

            const stats2Html = `<div style="text-align:center; display:flex; flex-direction:column; align-items:center; line-height:1;"><span>.---<span class="action">FLOOR</span>---.</span><span style="font-size:0.95em; margin-top:2px;">${floor}</span>
                <div style="text-align:center; display:flex; flex-direction:column; align-items:center; line-height:1;"><span>+===<span class="LV">LV</span>===+</span><span style="font-size:0.95em; margin-top:2px;">${player.level}</span>
                <div style="text-align:center; display:flex; flex-direction:column; align-items:center; line-height:1;"><span>+===<span class="EXP">EXP</span>===+</span><span style="font-size:0.95em; margin-top:2px;">${player.exp}/${player.level * 10}</span>
                <div style="text-align:center; display:flex; flex-direction:column; align-items:center; line-height:1;"><span>+===<span class="BTC">BTC</span>===+</span><span style="font-size:0.95em; margin-top:2px;">${player.bitcoins}</span>
                <span center>._ _ _ _ _ _.</span>
            `;
            document.getElementById('stats2').innerHTML = stats2Html;

            if (player.levelingUp) {
                startLevelUpAllocation();
                return;
            }

            let partyHTML = `<center><strong id="yourparty">.--------[=PARTY=]--------.</strong></center><br>`;
            if (party.length > 0) {
                party.forEach(member => {
                    partyHTML += `<center><span class="friendly">${member.name}</span> <span class="HP">(HP: ${member.hp})</span></center><br>`;
                });
            }
            document.getElementById("partylist").innerHTML = partyHTML;

            let output = sceneRenderer.render(player.x, player.y, DIRECTIONS[player.dir]);

            if (player.inCombat) {
                output += sceneRenderer.drawEnemyLayer(currentEnemy.id) || '';
                if (!awaitingPersuasionText) {
                    document.getElementById("controls").textContent =
                        "A:      Attack\nR:      Run\nP:      Persuade\nI:      Inventory";
                }
            } else {
                // Controls
                document.getElementById("controls").textContent =
                    "↑/W:      Move Forward\n" +
                    "↓/S:      Move Backward\n" +
                    "←/A, →/D: Turn\n" +
                    "Q, E:     Strafe\n" +
                    "T:        Talk\n" +
                    "I:        Inventory";
            }

            if (player.hp <= 0) {
                updateBattleLog(`Good job! <span class="action">You died</span> on <span class="action">floor ${floor}</span>`);
                gameOver = true;
                setTimeout(() => window.location.href = "title.html", 5000);
            }

            document.getElementById('game').innerHTML = output;
            player.resetEventFlags();
            setTorchOverlayVisibility();
        }


        function isEmpty(obj) {
            for (let i in obj) {
                return false;
            }
            return true;
        }

        function getTile(x, y) {
            return !coordsInBounds(x, y) ? new MapCell('wall') : MAP[y][x];
        }

        function coordsInBounds(x, y) {
            return x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT;
        }

        function animEatRat(callback) {
            const container = document.getElementById('viewportContainer');
            if (!container) return;

            // Prevent player input during animation
            window._inputBlocked = true;

            let overlay = document.getElementById('animEatRat');
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.id = 'animEatRat';
                container.appendChild(overlay);
            }
            overlay.innerHTML = '';
            const ratVideo = document.createElement('video');
            ratVideo.src = 'assets/fp-anim/rat-chomp.webm';
            ratVideo.autoplay = true;
            ratVideo.playsInline = true;
            ratVideo.addEventListener('ended', () => {
                gameLayers.forEach(layer => {
                    layer.classList.remove('dark');
                    layer.classList.add('lightening');
                });

                overlay.style.display = 'none';
                overlay.innerHTML = ''; // Remove the GIF from DOM
                window._inputBlocked = false;
                if (typeof callback === 'function') callback();

                setTimeout(() => {
                    gameLayers.forEach(layer => {
                        layer.classList.remove('lightening');
                    });
                }, 600); // Slightly longer than animation-duration

                ratVideo.remove();
            });

            overlay.appendChild(ratVideo);
            overlay.style.display = 'flex';

            // Immediately darken background layers (no animation delay)
            const gameLayers = container.querySelectorAll('.layer');
            gameLayers.forEach(layer => {
                layer.classList.remove('lightening', 'darkening', 'dark');
                layer.classList.add('dark');
            });
        }
        const origKeydown = document.onkeydown;
        document.addEventListener('keydown', function(e) {
            if (window._inputBlocked) {
                e.preventDefault();
                e.stopImmediatePropagation();
                return false;
            }
            if (typeof origKeydown === 'function') origKeydown(e);
        }, true);

        function setTorchOverlayVisibility() {
            const overlay = document.getElementById('animTorch');
            if (!overlay) return;
            // Hide torch in combat, resume after battle
            if (torchAnimActive && !player.inCombat) {
                overlay.style.display = 'flex';
            } else {
                overlay.style.display = 'none';
            }
        }

        // Update animTorchStart to always use setTorchOverlayVisibility
        function animTorchStart() {
            const container = document.getElementById('viewportContainer');
            let overlay = document.getElementById('animTorch');
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.id = 'animTorch';
                container.appendChild(overlay);
            }
            overlay.innerHTML = `<img src="assets/fp-anim/fp-torch1.gif">`;
            torchAnimActive = true;
            setTorchOverlayVisibility();
            playSFX('torch');
            const torch1Duration = 1800;
            setTimeout(() => {
                overlay.innerHTML = `<img src="assets/fp-anim/fp-torch2.gif">`;
                setTorchOverlayVisibility();
            }, torch1Duration);
        }

        function animTorchEnd() {
            const overlay = document.getElementById('animTorch');
            if (overlay) {
                overlay.style.display = 'none';
                overlay.innerHTML = '';
            }
            torchAnimActive = false;
        }

        function shakeScreen() {
            const container = document.getElementById('viewportContainer');
            if (!container) return;
            // Randomly pick a small vertical offset: -2, -1, 0, 1, or 2px
            const offset = (Math.random() > -0.5 ? -1 : -1) * (Math.random() > -0.5 ? -2 : 1);
            container.style.transition = 'transform 0.08s cubic-bezier(.36,.07,.19,.97)';
            container.style.transform = `translateY(${offset}px)`;
            setTimeout(() => {
                container.style.transform = '';
            }, 80);
        }

        function slideScreen(direction) {
            const container = document.getElementById('viewportContainer');
            if (!container) return;
            const offset = direction === 'left' ? -2 : 2; // Slide effect pixel amount (-x is left, x is right)
            container.style.transition = 'transform 0.12s cubic-bezier(.36,.07,.19,.97)';
            container.style.transform = `translateX(${offset}px)`;
            setTimeout(() => {
                container.style.transform = '';
            }, 120);
        }

        function move(direction) {
            if (player.inCombat || gameOver || player.movementDisabled) {
                return;
            }
            player.movementDisabled = true;

            playSFX('footstep');
            let nx, ny, randomEncounterChance = 0.25;
            if (direction === 'forward') {
                nx = player.x + DX[player.dir];
                ny = player.y + DY[player.dir];
                shakeScreen();
            } else if (direction === 'strafeLeft') {
                nx = player.x + DX[(player.dir + 3) % 4];
                ny = player.y + DY[(player.dir + 3) % 4];
                slideScreen('left');
            } else if (direction === 'strafeRight') {
                nx = player.x + DX[(player.dir + 1) % 4];
                ny = player.y + DY[(player.dir + 1) % 4];
                slideScreen('right');
            } else {
                nx = player.x - DX[player.dir];
                ny = player.y - DY[player.dir];
                randomEncounterChance = 0.5; // When moving backward
                shakeScreen();
            }
            const hasStinky = player.ring1 === "ringOfStinky" || player.ring2 === "ringOfStinky";
            if (hasStinky) {
                randomEncounterChance *= 0.7; // If Ring of Stinky is equipped, reduce encounter chance by 30%
            }

            const tile = getTile(nx, ny);
            if (!tile.isSolid) {
                player.x = nx;
                player.y = ny;

                const fireOnEnter =
                    typeof tile.onEnter === "function" &&
                    (typeof tile.isVisible !== "function" || tile.isVisible());

                if (fireOnEnter) {
                    tile.onEnter(nx, ny);
                } else if (Math.random() < randomEncounterChance) {
                    startEncounter();
                }
            } else if (typeof tile.onTouch === "function") {
                tile.onTouch();
            }

            // Set the movement delay range
            const maxDelay = 2000; // Max speed (movement delay) in milliseconds (2s)
            const minDelay = 1;  // Min speed (movement delay) in milliseconds (1/4 of 1s)

            // Calculate movement delay based on speed
            const baseDelay = maxDelay; // Start with the maximum delay
            const speedModifier = getEffectiveStat('speed') * 0.05; // 5% reduction per speed point
            const movementDelay = Math.max(minDelay, baseDelay * (1 - speedModifier)); // Ensure delay is at least minDelay

            setTimeout(() => {
                player.movementDisabled = false;
            }, movementDelay);

            render();
        }

        function turnLeft() {
            if (player.inCombat || gameOver) {
                return;
            }
            playSFX('turn');
            slideScreen('left');
            player.dir = (player.dir + 3) % 4;
            render();
        }

        function turnRight() {
            if (player.inCombat || gameOver) {
                return;
            }
            playSFX('turn');
            slideScreen('right');
            player.dir = (player.dir + 1) % 4;
            render();
        }

        function startEncounter() {
            // Filter out the mimic from the random enemy pool
            const randomEnemies = enemies.filter(enemy => enemy.id !== "mimic");

            // Pick a random enemy
            currentEnemy = structuredClone(
                randomEnemies[Math.floor(Math.random() * randomEnemies.length)]
            );

            // Scale enemy stats based on floor
            const floorBoost = Math.floor(floor / 2); // Scale every 2 floors
            if (floorBoost > 0) {
                currentEnemy.hp += floorBoost * 5; // +5 HP per scaling
                currentEnemy.attack = [
                    currentEnemy.attack[0] + (floorBoost * 3), // Adjust attack range based on floor scaling
                    currentEnemy.attack[1] + (floorBoost * 3)  // Adjust attack range based on floor scaling
                ];
                currentEnemy.bitcoins += floorBoost; // Increase Bitcoin drop based on floor scaling
            }
            persuasionAttempts = 0;
            maxPersuasionAttempts =
                (player.ring1 === "ringOfAmplifiedAudio" || player.ring2 === "ringOfAmplifiedAudio") ? 3 : 2;
            player.enterCombat();
            party.forEach(member => member.healedThisBattle = false);
            updateBattleLog(`A wild <span class="enemy">${currentEnemy.name}</span> appears!`);
            playRandomBattleMusic(); // <-- use this
        }


        function playerAttack() {
            if (!player.inCombat || awaitingPersuasionText) {
                return;
            }

            playSFX('attack');
            const playerWeapon = weapons[player.weapon];
            let dmg = Math.floor(Math.random() * playerWeapon.damage.randomMultiplier) + playerWeapon.damage.base;

            // Crit attacks based off LUK stat
            const critChance = getEffectiveStat('luck') * 0.01; // +0.1% chance per point
            let isCrit = Math.random() < critChance;
            if (isCrit) {
                dmg = Math.floor(dmg * 1.2);
                updateBattleLog(`<span class="LUK">CRITICAL HIT!</span> You dealt <span class="action">${dmg} HP</span> to ${currentEnemy.name}`);
            } else {
                updateBattleLog(`You deal ${dmg} HP to ${currentEnemy.name}`);
            }
            currentEnemy.hp -= dmg;
            endOfPlayerTurn();
        }

        function endOfPlayerTurn() {
            if (currentEnemy.hp <= 0) {
                if (currentEnemy.id === "mimic") {
                    updateBattleLog(`The <span class='enemy'>MIMIC</span> has been defeated! You find <span class="BTC">${currentEnemy.bitcoins} BTC</span> in its remains!`);
                    player.bitcoins += currentEnemy.bitcoins; // Award scaled BTC
                } else {
                    const baseExp = 5;
                    const floorBoost = Math.floor(floor / 2);
                    const exp = baseExp + (floorBoost * 5); // +5 EXP per boost
                    const bitcoinsEarned = currentEnemy.bitcoins;

                    const randomMsg = defeatMessages[Math.floor(Math.random() * defeatMessages.length)];
                    updateBattleLog(`${currentEnemy.name} ${randomMsg}`);
                    updateBattleLog(`You gained <span class="EXP">+${exp}</span> EXP and <span class="BTC">${bitcoinsEarned} BTC</span>`);
                    player.bitcoins += bitcoinsEarned;
                    player.exp += exp;
                }

                player.leaveCombat();
                currentEnemy = null;
                resumeExplorationMusic();
                party = party.filter(a => a.hp > 0);

                setTorchOverlayVisibility();

                if (player.exp >= player.level * 10) {
                    startLevelUpAllocation();
                }
            } else {
                enemyAttack();
            }

            render();
            setTorchOverlayVisibility();
        }

        function enemyAttack() {
            const targetAllies = party.filter(a => a.hp > 0);
            if (targetAllies.length && Math.random() < 0.5) {
                const target = targetAllies[Math.floor(Math.random() * targetAllies.length)];

                // Base damage
                let baseDamage = Math.floor(Math.random() * 5) + 1;

                // Boost damage based on the floor
                const floorBoost = Math.floor(floor / 2);  // Floor scaling every 2 floors
                baseDamage += floorBoost; // Increase base damage by the floorBoost



                // Calculate damage based on player's defense
                const playerArmor = armor[player.armor];
                const totalDefense = getEffectiveStat('defense') + (playerArmor ? playerArmor.defense : 0);

                let dmg = Math.max(1, Math.floor(baseDamage - totalDefense / 5));

                target.hp -= dmg;
                updateBattleLog(`<span class="enemy">${currentEnemy.name}</span> deals <span class="enemy">${dmg} HP</span> to your <span class="friendly">${target.name}</span>`);

                if (target.hp <= 0) {
                    updateBattleLog(`Your <span class="friendly">${target.name}</span> has been <span class="action">eviscerated</span>...`);
                }
            } else {
                // Same for the player, calculate the damage for the player
                let baseDamage = Math.floor(Math.random() * 5) + 1;

                // Boost damage based on the floor
                const floorBoost = Math.floor(floor / 2);  // Floor scaling every 2 floors
                baseDamage += floorBoost;

                // Calculate damage based on the player's defense
                const playerArmor = armor[player.armor];
                const totalDefense = getEffectiveStat('defense') + (playerArmor ? playerArmor.defense : 0);

                const dmg = Math.max(1, Math.floor(baseDamage - totalDefense / 5));
                player.hp -= dmg;

                updateBattleLog(`<span class="enemy">${currentEnemy.name}</span> deals <span class="HP">${dmg} HP</span> to <span class="friendly">you</span>`);

                if (player.hp <= 0) gameOver = true;
            }
        }



        function tryRun() {
            if (!player.inCombat || awaitingPersuasionText) {
                return;
            }

            playSFX('run');
            if (Math.random() < 0.5) {
                player.say("Gee willikers, I'm outta here!");
                player.leaveCombat();
                currentEnemy = null;
                resumeExplorationMusic(); // <-- use this
            } else {
                updateBattleLog("Couldn't escape!");
                enemyAttack();
            }
            render();
        }

        function tryPersuade(e) {
            e?.preventDefault();
            playSFX('persuade');
            awaitingPersuasionText = true;

            // Show the input box
            const inputBox = document.getElementById("inputBox");
            const input = document.getElementById("persuadeInput");
            inputBox.style.display = "flex";
            input.value = "";

            // Delay the focus slightly to ensure it's applied after rendering
            setTimeout(() => {
                input.focus();
            }, 10);
        }



        document.getElementById("persuadeInput").addEventListener("keydown", e => {
            if (e.key === "Enter") {
                const message = e.target.value;
                // ======== CHEAT COMMANDS ========
                if (message.startsWith("/")) {
                    handleCheatCommand(message);
                    e.target.value = "";
                    awaitingPersuasionText = false;
                    document.getElementById("inputBox").style.display = "none";
                    render();
                    return;
                }
                player.say(message);
                e.target.value = "";
                awaitingPersuasionText = false;
                document.getElementById("inputBox").style.display = "none";

                // ======== Speaking Outside Combat ========
                if (speakingOutsideCombat) {
                    speakingOutsideCombat = false;

                    if (party.length > 0) {
                        const responder = party[Math.floor(Math.random() * party.length)];
                        const responses = [
                            "--you pull out your translator-- 'Wow! Please shut the fuck up.'",
                            "--you pull out your translator-- 'Just so you know, we're not even...'",
                            "--you pull out your translator-- 'You can't be fucking serious...'",
                            "--you pull out your translator-- 'I've come for your pickleeee...'",
                            "--you pull out your translator-- 'Hey that's cool and all, but have you ever played SpongeBob SquarePants: Revenge of the Flying Dutchman on the Sony PlayStation 2?",
                            "--they're too busy playing Burnout Revenge on the PS2--",
                            "--they're too busy sexting your mom--",
                            "--they pick their own nose, and then they pick YOUR nose...--",
                            "--you notice them scratching their nuts whilst ignoring your interjection--",
                        ];

                        const reply = responses[Math.floor(Math.random() * responses.length)];
                        updateBattleLog(`${responder.name}: ${reply}`);
                    }

                    render();
                    return;
                }

                // ======== Persuasion During Combat ========
                if (persuasionAttempts >= maxPersuasionAttempts) {
                    updateBattleLog(`Your words are no longer being heard... <span class="action">you have run out of persuasion attempts.</span>`);
                    enemyAttack();
                    render();
                    return;
                }
                persuasionAttempts++;

                const prsStat = Math.min(getEffectiveStat('persuasion'), 100);
                const totalChance = prsStat / 100; // Chances cap out at 100%. So a stat of 12 would be 12% chance at success, etc

                if (Math.random() < totalChance) {
                    if (party.length < 3) {
                        const newAlly = {
                            name: currentEnemy.name,
                            hp: Math.floor(currentEnemy.hp / 2),
                            healedThisBattle: false
                        };
                        party.push(newAlly);
                        updateBattleLog(`<span class="PRS">${currentEnemy.name}</span> is now following your trail of sweat.`);
                    } else {
                        updateBattleLog(`<span class="action">${currentEnemy.name}</span> was <span class="friendly">spared</span> and went back home...`);
                    }
                    player.leaveCombat();
                    currentEnemy = null;
                    resumeExplorationMusic();
                } else {
                    updateBattleLog(`<span class="action">${currentEnemy.name}</span> really, quite genuinely, does not care...`);
                    enemyAttack();
                }

                if (persuasionAttempts >= maxPersuasionAttempts) {
                    updateBattleLog(`<span class="action">You've used your last persuasion attempt for this fight..</span>`);
                }

                render();
            }
        });


        function useItem(itemName) {
            if (items[itemName] && typeof items[itemName].use === "function") {
                items[itemName].use();
                player.inventory[itemName]--;
                if (player.inventory[itemName] <= 0) {
                    delete player.inventory[itemName];
                }
            }

            render();
        }

        function handleCheatCommand(cmd) {
            if (cmd === "/spawn merchant") {
                let found = false;
                for (let i = 0; i < 4; i++) {
                    const nx = player.x + DX[i];
                    const ny = player.y + DY[i];
                    if (coordsInBounds(nx, ny) && MAP[ny][nx]?.type === 'floor') {
                        merchant.isAlive = true;
                        merchant.isActiveOnFloor = true;
                        MAP[ny][nx] = new MapCell('merchant');
                        updateBattleLog('<span class="merchant">CHEAT: Merchant spawned</span>');
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    updateBattleLog('<span class="merchant">CHEAT: Merchant not spawned. Try a different spot.</span>');
                }
                return;
            }
            if (cmd === "/spawn gambler") {
                let found = false;
                for (let i = 0; i < 4; i++) {
                    const nx = player.x + DX[i];
                    const ny = player.y + DY[i];
                    if (coordsInBounds(nx, ny) && MAP[ny][nx]?.type === 'floor') {
                        gambler.isAlive = true;
                        gambler.isActiveOnFloor = true;
                        player.bitcoins = Math.max(player.bitcoins, gambler.playPrice);
                        MAP[ny][nx] = new MapCell('gambler');
                        updateBattleLog('<span class="gambler">CHEAT: Gambler spawned</span>');
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    updateBattleLog('<span class="gambler">CHEAT: Gambler not spawned. Try a different spot.</span>');
                }
                return;
            }
            if (cmd.startsWith("/givebtc ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount > 0) {
                    player.bitcoins += amount;
                    updateBattleLog(`<span class="BTC">CHEAT: Added ${amount} BTC to your worn out Kamen Rider wallet</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid BTC amount.</span>`);
                }
                return;
            }
            if (cmd.startsWith("/sethp ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount > 0) {
                    player.maxHp = amount;
                    player.hp = amount;
                    updateBattleLog(`<span class="HP">CHEAT: Max HP set to ${amount}</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid HP amount.</span>`);
                }
                return;
            }
            if (cmd.startsWith("/setdef ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount >= 0) {
                    player.defense = amount;
                    updateBattleLog(`<span class="DEF">CHEAT: Defense set to ${amount}</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid DEF amount.</span>`);
                }
                return;
            }
            if (cmd.startsWith("/setprs ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount >= 0) {
                    player.persuasion = amount;
                    updateBattleLog(`<span class="PRS">CHEAT: Persuasion set to ${amount}</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid PRS amount.</span>`);
                }
                return;
            }
            if (cmd.startsWith("/setspd ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount >= 0) {
                    player.speed = amount;
                    updateBattleLog(`<span class="SPD">CHEAT: Speed set to ${amount}</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid SPD amount.</span>`);
                }
                return;
            }
            if (cmd.startsWith("/setluk ")) {
                const amount = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(amount) && amount >= 0) {
                    player.luck = amount;
                    updateBattleLog(`<span class="LUK">CHEAT: Luck set to ${amount}</span>`);
                } else {
                    updateBattleLog(`<span class="action">Invalid LUK amount.</span>`);
                }
                return;
            }
            if (cmd === "/debug") {
                const yeahBoiii = 69999;
                player.maxHp = yeahBoiii;
                player.hp = yeahBoiii;
                player.defense = yeahBoiii;
                player.persuasion = yeahBoiii;
                player.speed = yeahBoiii;
                player.luck = yeahBoiii;
                player.bitcoins = yeahBoiii;

                let merchantSpawned = false;
                for (let i = 0; i < 4; i++) {
                    const nx = player.x + DX[i];
                    const ny = player.y + DY[i];
                    if (coordsInBounds(nx, ny) && MAP[ny][nx]?.type === 'floor') {
                        merchant.isAlive = true;
                        merchant.isActiveOnFloor = true;
                        MAP[ny][nx] = new MapCell('merchant');
                        merchantSpawned = true;
                        break;
                    }
                }

                let gamblerSpawned = false;
                if (merchantSpawned) {
                    for (let i = 0; i < 4; i++) {
                        const merchantPosition = merchant.location();
                        if (merchantPosition === null) {
                            break;
                        }
                        const gx = merchantPosition.x + DX[i];
                        const gy = merchantPosition.y + DY[i];
                        const notPlayer = gx !== player.x || gy !== player.y;
                        const notMerchant = gx !== merchantPosition.x || gy !== merchantPosition.y;
                        if (
                            coordsInBounds(gx, gy) &&
                            MAP[gy][gx]?.type === 'floor' &&
                            notPlayer &&
                            notMerchant
                        ) {
                            gambler.isAlive = true;
                            gambler.isActiveOnFloor = true;
                            MAP[gy][gx] = new MapCell('gambler');
                            gamblerSpawned = true;
                            break;
                        }
                    }
                }
                updateBattleLog(
                    `<span class="action">CHEAT: Debug mode activated! All stats and BTC set to ${yeahBoiii}. Merchant${merchantSpawned ? "" : " (FAILED)"} and Gambler${gamblerSpawned ? "" : " (FAILED)"} spawned next to you.</span>`
                );
                render();
                return;
            }


            if (cmd.startsWith("/setfloor ")) {
                const floorNumber = parseInt(cmd.split(" ")[1], 10);
                if (!isNaN(floorNumber) && floorNumber > 0) {
                    floor = floorNumber;
                    updateBattleLog(`<span class="action">CHEAT: Moved to Floor ${floorNumber}</span>`);
                    generateMap();
                    render();
                } else {
                    updateBattleLog(`<span class="action">Try an actual floor number, retard.</span>`);
                }
                return;
            }

            updateBattleLog(`<span class="action">RETARD ALERT! INVALID CHEAT: ${cmd}</span>`);
        }

        function getArticle(noun) {
            if (noun.match(/^\w*s\b|\barmor$/i)) {
                return '';
            }

            return ['a', 'e', 'i', 'o', 'u'].includes(noun.substr(0, 1).toLowerCase()) ? 'an ' : 'a ';
        }

        function gamble() {
            player.bitcoins -= gambler.playPrice;
            updateBattleLog(`You hand the gambler <span class="tooExpensive">${gambler.playPrice} BTC</span>. Let's hope it was worth it`);

            document.getElementById('menu').classList.add('hidden');

            // LUK affects chance to roll a 12
            // Base chance to roll a 12 is 1/36 (~2.78%)
            let luckBonus = getEffectiveStat('luck') * 0.03; // +3% chance to roll a 12
            let roll12 = Math.random() < (1/36 + luckBonus);

            let dice;
            if (roll12) {
                dice = [6, 6];
            } else {
                // Roll normally, but avoid double sixes
                do {
                    dice = [
                        Math.floor(Math.random() * 6) + 1,
                        Math.floor(Math.random() * 6) + 1,
                    ];
                } while (dice[0] === 6 && dice[1] === 6);
            }

            gambleAnimation(dice, () => {
                gambleOutcome(dice);
            });
            playSFX('gamble');
        }

        function gambleOutcome(dice) {
            const sum = dice[0] + dice[1];
            const win = sum === 12;
            const sumClass = win ? 'friendly' : 'enemy';

            updateBattleLog(
                'You rolled a ' +
                `<span class="gambler">${dice[0]}</span> and a ` +
                `<span class="gambler">${dice[1]}</span> ` +
                `for a sum of <span class="${sumClass}">${sum}</span>`
            );

            if (win) {
                const stats = ['hp', 'defense', 'persuasion'];
                const randomStat = stats[Math.floor(Math.random() * stats.length)];

                switch (randomStat) {
                    case 'hp': {
                        const healthBoost = 5 + (Math.floor((Math.random() * 2)) * 5);
                        player.hp += healthBoost;
                        player.maxHp += healthBoost;
                        updateBattleLog(
                            `<span class="LV">You scored a health boost! ` +
                            `+${healthBoost} HP!</span>`
                        );
                        break;
                    }
                    case 'defense': {
                        const defenseBoost = 1 + Math.floor((Math.random() * 2));
                        player.defense += defenseBoost;
                        updateBattleLog(
                            `<span class="LV">You won a defense boost! ` +
                            `+${defenseBoost} DEF!</span>`
                        );
                        break;
                    }
                    case 'persuasion': {
                        const persuasionBoost = 1 + Math.floor((Math.random() * 2));
                        player.persuasion += persuasionBoost;
                        updateBattleLog(
                            `<span class="LV">You won a persuasion boost! ` +
                            `+${persuasionBoost} PRS!</span> (Actually the ` +
                            `gambler just handed you a beat-up copy of ` +
                            `"How to Win Friends and Influence People", ` +
                            `but whatever)`
                        );
                        break;
                    }
                }
            } else {
                gambler.say('<span class="gambler">Hah! Tough luck, kid!</span> You gotta know when to hold \'em, know when to fold \'em, heh heh');
            }

            gambler.isActiveOnFloor = false;
            updateBattleLog('The gambler escapes into the shadows');
            render();

            menu.close();
        }

        /**
         * This animates the hand throwing dice when gambling
         *
         * The animation works by calling the gambleFrames in sequence. The
         * number of defined frames is actually more than the number of the
         * available frames in the animation. This is because the final frame is
         * held and displays random digits to emphasize the roll
         */
        function gambleAnimation(dice, callback, frame) {
            const maxFrames = 24;
            const frameNumber = frame || 0;
            const displayFrame = Math.min(frameNumber, gambleFrames.length - 1);
            const isFinalFrame = frameNumber >= maxFrames - 1;

            if (frameNumber === 0) {
                animationActive = true;
                document.getElementById('animation').classList.remove('hidden');
                document.getElementById('menu').classList.add('hidden');
            }

            // Set random dice digits before displaying the actual outcome
            const d = isFinalFrame ? dice : [
                Math.floor(Math.random() * 6) + 1,
                Math.floor(Math.random() * 6) + 1,
            ];

            if (frameNumber < maxFrames) {
                // Add some padding to center the animation
                let frameText = gambleFrames[displayFrame].replace(/^/gm, '       ');
                if (frameNumber >= gambleFrames.length - 4) {
                    // Draw digits on the bones
                    frameText = frameText.replace(
                        /(^[ |]+\n^ +\|   ) {5}( +\| +\|   ) {5}(.+\n^ +\|   ) {5}( +\| +\|   ) {5}(.+\n^ +\|   ) {5}( +\| +\|   ) {5}/m,
                        `$1${dieDigit[d[0] - 1][0]}$2${dieDigit[d[1] - 1][0]}$3${dieDigit[d[0] - 1][1]}$4${dieDigit[d[1] - 1][1]}$5${dieDigit[d[0] - 1][2]}$6${dieDigit[d[1] - 1][2]}`,
                    );
                }

                document.getElementById("animation").textContent = frameText;
                setTimeout(() => gambleAnimation(dice, callback, frameNumber + 1), !isFinalFrame ? 50 : 3000);
            } else {
                document.getElementById('animation').classList.add('hidden');
                document.getElementById('menu').classList.remove('hidden');
                animationActive = false;
                typeof callback === 'function' && callback();
            }
        }

        function drawCircle(screen, centerX, centerY, radius, character) {
            const height = sceneRenderer.displayHeight;
            const width = Math.round(sceneRenderer.displayWidth / 2);

            let x = radius;
            let y = 0;
            let decisionOver2 = 1 - x;   // Decision criterion divided by 2

            while (y <= x) {
                const points = [
                    [centerY + y, centerX + x],
                    [centerY + x, centerX + y],
                    [centerY + x, centerX - y],
                    [centerY + y, centerX - x],
                    [centerY - y, centerX - x],
                    [centerY - x, centerX - y],
                    [centerY - x, centerX + y],
                    [centerY - y, centerX + x]
                ];

                // Set pixels if they are within bounds
                for (const [py, px] of points) {
                    if (py >= 0 && py < height && px >= 0 && px < width) {
                        screen[py][px] = character;
                    }
                }

                y++;
                if (decisionOver2 <= 0) {
                    decisionOver2 += 2 * y + 1;
                } else {
                    x--;
                    decisionOver2 += 2 * (y - x) + 1;
                }
            }
        }

        function explosionAnimation(callback, frame) {
            const maxFrames = 32;
            const frameNumber = frame || 0;
            const isCallbackFrame = frameNumber === 4;
            const $animation = document.getElementById('animation');
            $animation.classList.add('explosion');

            if (frameNumber === 0) {
                animationActive = true;
                $animation.classList.remove('hidden');
            }

            let screen = Array.from(
                { length: sceneRenderer.displayHeight },
                () => Array(Math.round(sceneRenderer.displayWidth / 2)).fill(' ')
            );

            const centerX = Math.round(sceneRenderer.displayWidth / 4);
            const centerY = Math.round(sceneRenderer.displayHeight / 2);
            const totalCircles = 8;
            const characters = ['░', '▒', '▓'];

            for (let i=0; i<totalCircles; i++) {
                const radius = frame - i;
                if (radius > 0 && radius <= 18) {
                    drawCircle(screen, centerX, centerY, radius, characters[i % characters.length]);
                }
            }

            let text = '';

            for (let y=0; y<screen.length; y++) {
                for (let x=0; x<screen[y].length; x++) {
                    text += screen[y][x] + screen[y][x];
                }

                if (y < screen.length) {
                    text += "\n";
                }
            }

            $animation.innerText = text;

            const displayFrame = Math.min(frameNumber, gambleFrames.length - 1);

            if (isCallbackFrame && typeof callback === 'function') {
                callback();
            }

            if (frameNumber < maxFrames) {
                setTimeout(() => explosionAnimation(callback, frameNumber + 1), 10);
            } else {
                $animation.classList.add('hidden');
                $animation.classList.remove('explosion');
                animationActive = false;
            }
        }


        function openChest() {
            if (MAP[player.y][player.x]?.type === 'mimic') {
                // Mimic detected, start a battle
                playSFX('scream');
                MAP[player.y][player.x] = new MapCell(); // Remove the mimic from the map

                // Spawn mimic and apply scaling
                const baseMimic = enemies.find(e => e.id === "mimic");
                currentEnemy = scaleMimicStats(baseMimic);

                updateBattleLog("Holy shit! It was actually a <span class='enemy'>MIMIC</span>!!!");
                player.enterCombat();
                playRandomBattleMusic();
            } else if (MAP[player.y][player.x]?.type === 'treasureChest') {
                // Normal chest, provide loot
                let lootTypeRoll = Math.random();
                let chestContents;
                if (lootTypeRoll < 0.4) {
                    chestContents = { type: 'BTC', amount: Math.floor(Math.random() * 10) + 3 };
                } else if (lootTypeRoll < 0.7) {
                    chestContents = { type: 'item', item: getRandomMerchantItem() };
                } else {
                    // Try to spawn a ring based on chestChance
                    const possibleRings = Object.keys(rings).filter(ringId =>
                        Math.random() < (rings[ringId].chestChance || 0)
                    );
                    if (possibleRings.length > 0) {
                        const ringId = possibleRings[Math.floor(Math.random() * possibleRings.length)];
                        chestContents = { type: 'ring', ring: ringId };
                    } else {
                        // fallback to BTC if no ring
                        chestContents = { type: 'BTC', amount: Math.floor(Math.random() * 10) + 3 };
                    }
                }

                if (chestContents.type === 'BTC') {
                    let bonus = Math.floor(chestContents.amount * (getEffectiveStat('luck') * 0.02));
                    let total = chestContents.amount + bonus;
                    player.bitcoins += total;
                    updateBattleLog(
                        `You found <span class="BTC">${total} BTC</span> in the chest!`
                    );
                } else if (chestContents.type === 'item') {
                    const itemName = chestContents.item;
                    player.inventory[itemName] = (player.inventory[itemName] || 0) + 1;
                    updateBattleLog(`You found <span class="friendly">${items[itemName].name}</span> in the chest!`);
                } else if (chestContents.type === 'ring') {
                    const ringId = chestContents.ring;
                    player.inventory[ringId] = (player.inventory[ringId] || 0) + 1;
                    updateBattleLog(`You found <span class="friendly">${rings[ringId].name}</span> in the chest!`);
                }

                MAP[player.y][player.x] = new MapCell(); // Remove the chest from the map
            }

            render();
        }

        function scaleMimicStats(baseMimic) {
            const floorBoost = Math.floor(floor / 2); // Scale every 2 floors
            const scaledMimic = structuredClone(baseMimic);

            if (floorBoost > 0) {
                scaledMimic.hp += floorBoost * 5; // +5 HP per scaling
                scaledMimic.attack = [
                    scaledMimic.attack[0] + (floorBoost * 3), // Adjust attack range
                    scaledMimic.attack[1] + (floorBoost * 3)
                ];
                scaledMimic.bitcoins += floorBoost * 10; // Increase BTC reward
            }

            return scaledMimic;
        }

        document.addEventListener('keydown', e => {
            const key = e.key.toLowerCase();

            if (gameOver) return;
            if (!player.inCombat && key === 't' && !awaitingPersuasionText && !menu.isOpen() && !player.levelingUp) {
                speakingOutsideCombat = true;
                tryPersuade(e);
                return;
            }
            if (awaitingPersuasionText) return;

            if (menu.isOpen()) {
                menu.handleInput(key);
            } else if (player.levelingUp) {
                handleLevelUpInput(key); // Call the level-up input handler
            } else if (key === 'i') {
                playSFX('inventoryOpen');
                menu.open('inventory');
            } else if (player.inCombat) {
                switch (key) {
                    case 'a':
                        playerAttack();
                        break;
                    case 'r':
                        tryRun();
                        break;
                    case 'p':
                        tryPersuade(e);
                        break;
                }
            } else {
                switch (key) {
                    case 'w':
                    case 'arrowup':
                        e.preventDefault();
                        move('forward');
                        break;
                    case 's':
                    case 'arrowdown':
                        e.preventDefault();
                        move('backward');
                        break;
                    case 'a':
                    case 'arrowleft':
                        e.preventDefault();
                        turnLeft();
                        break;
                    case 'd':
                    case 'arrowright':
                        e.preventDefault();
                        turnRight();
                        break;
                    case 'q':
                        e.preventDefault();
                        move('strafeLeft');
                        break;
                    case 'e':
                        e.preventDefault();
                        move('strafeRight');
                        break;
                    case 't':
                        speakingOutsideCombat = true;
                        tryPersuade(e);
                        break;
                }
            }
        });


        function descend() {
            floor++;
            updateBattleLog(`Descending into floor ${floor}...`);

            const floorBoost = Math.floor(floor / 2);
            if (floorBoost > lastFloorBoostNotice) {
                updateBattleLog(`<span class="action">As you descend deeper into the dungeon, you sense greater danger than before</span>.`);
                lastFloorBoostNotice = floorBoost;
            }

            if (Math.random() < 0.5) {
                const flavorText = [
                    "The stale air fills your nostrils.",
                    "You feel like you're being watched.",
                    "A chill creeps down your spine.",
                    "Your torch flickers strangely in the windless corridor.",
                    "A draft carries the scent of mildew, ash, and Lemon Pledge.",
                    "You hear a dog yipping in the distance.",
                    "An empty snail shell lies cracked on the stairs.",
                    "A growl echoes through the hallway.",
                    "A faint smell of urinal cake wafts up from below.",
                    "You hear a toilet flush in the distance.",
                    "There's graffiti on the wall: \"Beware the snail!\"",
                    "You smell something pungent. Possibly ancient evil. Possibly cheese.",
                    "You hear a groan, as if the dungeon itself is aware of your presence.",
                    "Somewhere ahead, something clanks. You sincerely hope it's plumbing.",
                    "You hear a plunger plunging menacingly.",
                ];

                const logLine = flavorText[Math.floor(Math.random() * flavorText.length)];
                updateBattleLog(logLine);
            }

            generateMap();
            animTorchEnd();
            playRandomExplorationMusic();
        }


        generateMap();
        updateSeenTiles();
        drawMinimap();
        playRandomExplorationMusic();
        render();

        document.getElementById('musicToggle').addEventListener('click', () => {
            musicEnabled = !musicEnabled;
            const btn = document.getElementById('musicToggle');
            btn.textContent = musicEnabled ? "DISABLE MUSIC" : "ENABLE MUSIC";

            stopAllMusic();
            if (musicEnabled) {
                if (player.inCombat) {
                    playRandomBattleMusic();
                } else {
                    if (currentExplorationTrack) {
                        resumeExplorationMusic();
                    } else {
                        playRandomExplorationMusic();
                    }
                }
            }
        });

        const menu = {
            breadcrumbs: [],
            selectionIndex: 0,
            currentPage: 0, // Track the current page for paginated menus
            getActiveMenu: () => menu.menus[menu.breadcrumbs.at(-1)?.menuName] || undefined,
            isOpen: () => menu.breadcrumbs.length > 0,
            open: (menuName) => {
                if (typeof menu.menus[menuName] === 'undefined') {
                    console.error('No matching entry for the designated menu name', { menuName });
                    return;
                }

                const activeMenu = menu.menus[menuName];

                menu.breadcrumbs.push({
                    menuName,
                    selectionIndex: menu.selectionIndex,
                    currentPage: menu.currentPage,
                });

                menu.selectionIndex = 0; // Reset selection index
                menu.currentPage = 0; // Reset to the first page

                document.getElementById('game').classList.add('hidden');
                document.getElementById('menu').classList.remove('hidden');
                document.getElementById('menuSelectionDescription').textContent = '';

                activeMenu.onOpen?.();
                menu.render();
            },
            close: () => {
                const previousMenu = menu.breadcrumbs.pop();
                if (previousMenu) {
                    menu.menus[previousMenu.menuName].onClose?.();
                    menu.selectionIndex = previousMenu.selectionIndex;
                    menu.currentPage = previousMenu.currentPage;
                }

                if (menu.breadcrumbs.length === 0) {
                    document.getElementById('menu').classList.add('hidden');
                    document.getElementById('game').classList.remove('hidden');
                }
            },
            closeAll: () => {
                while (menu.breadcrumbs.length > 0) {
                    const previousMenu = menu.breadcrumbs.pop();
                    menu.menus[previousMenu.menuName].onClose?.();
                }
                document.getElementById('menu').classList.add('hidden');
                document.getElementById('game').classList.remove('hidden');
            },
            render: () => {
                let menuHtml = "";
                const activeMenu = menu.getActiveMenu();
                if (typeof activeMenu === 'undefined') {
                    return;
                }

                const options = activeMenu.getOptions();
                const itemsPerPage = 8; // Number of items per page
                const totalPages = Math.ceil(options.length / itemsPerPage); // Calculate total pages
                const startIndex = menu.currentPage * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedOptions = options.slice(startIndex, endIndex);

                // Render the title and page indicator
                const titleText = typeof activeMenu.title === 'function' ? activeMenu.title() : activeMenu.title;
                const titleHtml = activeMenu.title ? `<span class="title">「${titleText}」</span>` : '';
                const landingHtml = `<div>${activeMenu?.landingHtml?.() || ''}</div>`;
                document.getElementById('menuLanding').innerHTML = titleHtml + landingHtml;

                const paginationText = totalPages > 1 ? (
                    (menu.currentPage > 0 ? '◀ ' : '  ') +
                    `Page ${menu.currentPage + 1} of ${totalPages}` +
                    (menu.currentPage + 1 < totalPages ? ' ▶' : '  ')
                ) : '';

                menuHtml += `<div id="pageNum">${paginationText}</div>`;

                // Render the options for the current page
                paginatedOptions.forEach((option, index) => {
                    const isSelectedLine = index === menu.selectionIndex;
                    const cursor = isSelectedLine ? "▶ " : "  ";
                    const spanHtml = option.className ? `<span class="${option.className}">` : '<span>';
                    const trailText = option.trailText ? `${option.trailText}` : '';

                    const maxLineLength = 56; // Max "." trail width
                    const dots = trailText
                        ? '.'.repeat(Math.max(0, maxLineLength - option.displayText.length - trailText.length - 4))
                        : '';

                    menuHtml += `${cursor}${spanHtml}${option.displayText}${dots}${trailText}</span>\n`;


                    if (isSelectedLine) {
                        document.getElementById('menuSelectionDescription').textContent = option.description;
                    }
                });

                document.getElementById('menuList').innerHTML = menuHtml;
            },
            handleInput: (key) => {
                if (animationActive) return;
                const activeMenu = menu.getActiveMenu();
                const options = activeMenu.getOptions();
                const itemsPerPage = 8; // Number of items per page
                const totalPages = Math.ceil(options.length / itemsPerPage);
                const itemsOnCurrentPage = (menu.currentPage + 1) >= totalPages
                    ? ((options.length % itemsPerPage) || itemsPerPage)
                    : itemsPerPage;

                switch (key) {
                    case 'escape':
                        menu.close();
                        playSFX('uiCancel');
                        break;
                    case 'w':
                    case 'arrowup':
                        menu.selectionIndex = menu.selectionIndex <= 0
                            ? itemsOnCurrentPage - 1
                            : menu.selectionIndex - 1;
                        playSFX('uiOption');
                        break;
                    case 's':
                    case 'arrowdown':
                        menu.selectionIndex = menu.selectionIndex >= itemsOnCurrentPage - 1
                            ? 0
                            : menu.selectionIndex + 1;
                        playSFX('uiOption');
                        break;
                    case 'a':
                    case 'arrowleft':
                        if (menu.currentPage > 0) {
                            menu.currentPage--;
                            menu.selectionIndex = 0; // Reset selection index on page change
                            playSFX('uiOption');
                        }
                        break;
                    case 'd':
                    case 'arrowright':
                        if (menu.currentPage < totalPages - 1) {
                            menu.currentPage++;
                            menu.selectionIndex = 0; // Reset selection index on page change
                            playSFX('uiOption');
                        }
                        break;
                    case ' ':
                    case 'e':
                    case 'enter': {
                        const selectedOptionId = options[menu.currentPage * itemsPerPage + menu.selectionIndex]?.id;
                        if (selectedOptionId === '_back') {
                            menu.close();
                            playSFX('uiCancel');
                        } else if (selectedOptionId === '_exitAll') {
                            menu.closeAll();
                            playSFX('uiCancel');
                        } else {
                            activeMenu.select(selectedOptionId);
                            playSFX('uiSelect');
                        }
                        break;
                    }
                }

                menu.render();
            },
            menus: {
                inventory: {
                    title: "INVENTORY",
                    landingHtml: () => {
                        return isEmpty(player.inventory)
                            ? 'You own nothing. Klaus Schwab would be proud'
                            : null;
                    },
                    getOptions: () => [
                        {
                            id: "inventoryItems",
                            displayText: "Items",
                            description: "View your consumable items.",
                        },
                        {
                            id: "inventoryEquipment",
                            displayText: "Equipment",
                            description: "View and change your equipped weapon and armor.",
                        },
                        {
                            id: "_back",
                            displayText: "[Back]",
                            description: "Get back to playing the game",
                        }
                    ],
                    select: (selectedOptionId) => {
                        menu.open(selectedOptionId);
                    },
                },
                inventoryItems: {
                    title: "ITEMS",
                    landingHtml: () => {
                        return isEmpty(player.inventory)
                            ? 'You own nothing. Klaus Schwab would be proud'
                            : null;
                    },
                    getOptions: () => {
                        const options = Object.keys(player.inventory)
                            .filter(itemId => items[itemId])
                            .map((itemId) => ({
                                id: itemId,
                                displayText: items[itemId].name,
                                description: items[itemId].description,
                                trailText: `${player.inventory[itemId]}`,
                            }));

                        options.push({
                            id: "_back",
                            displayText: "[Back]",
                            description: "Return to the inventory menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        useItem(selectedOptionId);
                        menu.closeAll(); // Close all menus after using an item
                        if (currentEnemy && currentEnemy.hp > 0) {
                            enemyAttack();
                            render();
                        }
                    },
                },
                inventoryEquipment: {
                    title: "EQUIPMENT",
                    getOptions: () => {
                        const weapon = weapons[player.weapon];
                        const armorPiece = armor[player.armor];
                        const ring1 = player.ring1 ? rings[player.ring1]?.name : "None";
                        const ring2 = player.ring2 ? rings[player.ring2]?.name : "None";
                        return [
                            {
                                id: "equipHand",
                                displayText: `Hand: ${weapon?.name || "None"}`,
                                description: "View and equip your weapons.",
                            },
                            {
                                id: "equipBody",
                                displayText: `Body: ${armorPiece?.name || "None"}`,
                                description: "View and equip your armor.",
                            },
                            {
                                id: "equipRings",
                                displayText: `Rings: ${ring1}\n         ${ring2}`,
                                description: "View and equip your rings.",
                            },
                            {
                                id: "_back",
                                displayText: "[Back]",
                                description: "Return to the inventory menu",
                            }
                        ];
                    },
                    select: (selectedOptionId) => {
                        menu.open(selectedOptionId);
                    },
                },
                equipHand: {
                    title: "EQUIP WEAPON",
                    getOptions: () => {
                        const ownedWeapons = Object.keys(weapons).filter(w => player.inventory[w] > 0 || player.weapon === w);
                        const options = ownedWeapons.map((weaponId) => ({
                            id: weaponId,
                            displayText: weapons[weaponId].name + (player.weapon === weaponId ? " (Equipped)" : ""),
                            description:
                                `${weapons[weaponId].description}\n` +
                                `Base Damage: ${weapons[weaponId].damage.base}, ` +
                                `Random Multiplier: ${weapons[weaponId].damage.randomMultiplier}`,
                            className: player.weapon === weaponId ? "friendly" : undefined,
                        }));

                        options.push({
                            id: "_back",
                            displayText: "[Back]",
                            description: "Return to equipment menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        player.weapon = selectedOptionId;
                        updateBattleLog(`You now wield a mighty <span class="friendly">${weapons[selectedOptionId].name}</span>! You feel like you're ready to take some dumbass kid's lunch money... sicko.`);
                        menu.close();
                    },
                },

                equipBody: {
                    title: "EQUIP ARMOR",
                    getOptions: () => {
                        const ownedArmor = Object.keys(armor).filter(a => player.inventory[a] > 0 || player.armor === a);
                        const options = ownedArmor.map((armorId) => ({
                            id: armorId,
                            displayText: armor[armorId].name + (player.armor === armorId ? " (Equipped)" : ""),
                            description:
                                `${armor[armorId].description}\n` +
                                `Defense: ${armor[armorId].defense}`,
                            className: player.armor === armorId ? "friendly" : undefined,
                        }));

                        options.push({
                            id: "_back",
                            displayText: "[Back]",
                            description: "Return to equipment menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        player.armor = selectedOptionId;
                        updateBattleLog(`You are now wearing <span class="friendly">${armor[selectedOptionId].name}</span>! You know what they say about wearing protection...`);
                        menu.close();
                    },
                },
                equipRings: {
                    title: "EQUIP RINGS",
                    getOptions: () => {
                        return [
                            {
                                id: "ring1",
                                displayText: `Slot 1: ${player.ring1 ? rings[player.ring1].name + " (Equipped)" : "None"}`,
                                description: "Equip a ring to Slot 1.",
                                className: "friendly"
                            },
                            {
                                id: "ring2",
                                displayText: `Slot 2: ${player.ring2 ? rings[player.ring2].name + " (Equipped)" : "None"}`,
                                description: "Equip a ring to Slot 2.",
                                className: "friendly"
                            },
                            {
                                id: "_back",
                                displayText: "[Back]",
                                description: "Return to equipment menu",
                            }
                        ];
                    },
                    select: (selectedOptionId) => {
                        if (selectedOptionId === "ring1") {
                            menu.open("ring1Select");
                        } else if (selectedOptionId === "ring2") {
                            menu.open("ring2Select");
                        } else {
                            menu.close();
                        }
                    },
                },
                ring1Select: {
                    title: "EQUIP RING 1",
                    getOptions: () => {
                        const ownedRings = Object.keys(rings).filter(r => player.inventory[r] > 0 || player.ring1 === r || player.ring2 === r);
                        const options = ownedRings.map((ringId) => ({
                            id: ringId,
                            displayText: rings[ringId].name + (player.ring1 === ringId ? " (Equipped)" : ""),
                            description: rings[ringId].description,
                            className: player.ring1 === ringId
                                ? "friendly"
                                : player.ring2 === ringId
                                    ? "muted"
                                    : undefined,
                        }));
                        options.unshift({
                            id: null,
                            displayText: "None",
                            description: "Unequip this ring slot.",
                        });
                        options.push({
                            id: "_back",
                            displayText: "[Back]",
                            description: "Return to rings menu",
                        });
                        return options;
                    },
                    select: (selectedOptionId) => {
                        // Prevent equipping the same ring in both slots
                        if (selectedOptionId && selectedOptionId === player.ring2) {
                            updateBattleLog("You can't equip the same ring in both slots!");
                            return;
                        }
                        player.ring1 = selectedOptionId || null;
                        updateBattleLog(`You equipped <span class="friendly">${selectedOptionId ? rings[selectedOptionId].name : "no ring"}</span> in Ring 1 slot.`);
                        menu.close();
                        render()
                    },
                },

                ring2Select: {
                    title: "EQUIP RING 2",
                    getOptions: () => {
                        const ownedRings = Object.keys(rings).filter(r => player.inventory[r] > 0 || player.ring1 === r || player.ring2 === r);
                        const options = ownedRings.map((ringId) => ({
                            id: ringId,
                            displayText: rings[ringId].name + (player.ring2 === ringId ? " (Equipped)" : ""),
                            description: rings[ringId].description,
                            className: player.ring2 === ringId
                                ? "friendly"
                                : player.ring1 === ringId
                                    ? "muted"
                                    : undefined,
                        }));
                        options.unshift({
                            id: null,
                            displayText: "None",
                            description: "Unequip this ring slot.",
                        });
                        options.push({
                            id: "_back",
                            displayText: "[Back]",
                            description: "Return to rings menu",
                        });
                        return options;
                    },
                    select: (selectedOptionId) => {
                        // Prevent equipping the same ring in both slots
                        if (selectedOptionId && selectedOptionId === player.ring1) {
                            updateBattleLog("You can't equip the same ring in both slots!");
                            return;
                        }
                        player.ring2 = selectedOptionId || null;
                        updateBattleLog(`You equipped <span class="friendly">${selectedOptionId ? rings[selectedOptionId].name : "no ring"}</span> in Ring 2 slot.`);
                        menu.close();
                        render()
                    },
                },

                merchant: {
                    title: "MERCHANT",
                    onOpen: () => {
                        merchant.say('Welcome to SlobMart!');
                    },
                    onClose: () => {
                        merchant.say('Thank you. Come again!');
                    },
                    landingHtml: () => {
                        return player.bitcoins > 0
                            ? `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                            : "Your wallet is emptier than a lughead's skull. But you can still look around";
                    },
                    getOptions: () => {
                        return [
                            {
                                id: "merchantItems",
                                displayText: "Items",
                                description: "See what consumable items are for sale",
                            },
                            {
                                id: "merchantWeapons",
                                displayText: "Weapons",
                                description: "Look at some weapon upgrades",
                            },
                            {
                                id: "merchantArmor",
                                displayText: "Armor",
                                description: "Get some thicker skin",
                            },
                            {
                                id: "merchantRings",
                                displayText: "Rings",
                                description: "Jewelry that will probably turn you gay",
                            },
                            {
                                id: "_back",
                                displayText: "Leave",
                                description: "Get back to spelunking",
                            },
                        ];
                    },
                    select: (selectedOptionId) => {
                        menu.open(selectedOptionId);
                    },
                },
                merchantItems: {
                    title: "MERCHANT",
                    landingHtml: () => {
                        return player.bitcoins > 0
                            ? `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                            : "Your wallet is emptier than a lughead's skull. But you can still look around";
                    },
                    getOptions: () => {
                        const options = merchant.items.map((itemId) => ({
                            id: itemId,
                            displayText: items[itemId].name,
                            description: items[itemId].description,
                            trailText: `${items[itemId].price} BTC`,
                            disabled: items[itemId].price > player.bitcoins,
                            className: items[itemId].price > player.bitcoins ? 'tooExpensive' : undefined,
                        }));

                        options.push({
                            id: "_back",
                            displayText: "Back",
                            description: "Return to the merchant menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        merchant.buy('item', selectedOptionId);
                    },
                },
                merchantWeapons: {
                    title: "MERCHANT",
                    landingHtml: () => {
                        const message = player.bitcoins > 0
                            ? `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                            : "Your wallet is emptier than a lughead's skull. But you can still look around";

                        const currentWeapon = weapons[player.weapon].name;
                        const currentWeaponDisplay = getArticle(currentWeapon) + currentWeapon;
                        const wieldingMessage = `You are currently wielding ${currentWeaponDisplay}`;

                        return `${message}\n\n${wieldingMessage}`;
                    },
                    getOptions: () => {
                        const weaponKeys = Object.keys(weapons);
                        const options = weaponKeys.map((weaponId) => {
                            const tooExpensive = weapons[weaponId].price > player.bitcoins;
                            const alreadyOwned = player.inventory[weaponId] > 0 || player.weapon === weaponId;
                            return {
                                id: weaponId,
                                displayText: weapons[weaponId].name,
                                description:
                                    `${weapons[weaponId].description}\n` +
                                    `Base Damage: ${weapons[weaponId].damage.base}, ` +
                                    `Random Multiplier: ${weapons[weaponId].damage.randomMultiplier}`,
                                trailText: `${weapons[weaponId].price} BTC`,
                                disabled: tooExpensive || alreadyOwned,
                                className: alreadyOwned ? 'muted' : (tooExpensive ? 'tooExpensive' : undefined),
                            };
                        });

                        options.push({
                            id: "_back",
                            displayText: "Back",
                            description: "Return to the merchant menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        merchant.buy('weapon', selectedOptionId);
                    },
                },
                merchantArmor: {
                    title: "MERCHANT",
                    landingHtml: () => {
                        const message = player.bitcoins > 0
                            ? `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                            : "Your wallet is emptier than a lughead's skull. But you can still look around";

                        const currentArmor = armor[player.armor].name;
                        const currentArmorDisplay = getArticle(currentArmor) + currentArmor;
                        const wearingMessage = `You are currently wearing ${currentArmorDisplay}`;

                        return `${message}\n\n${wearingMessage}`;
                    },
                    getOptions: () => {
                        const armorKeys = Object.keys(armor);
                        const options = armorKeys.map((armorId) => {
                            const tooExpensive = armor[armorId].price > player.bitcoins;
                            const alreadyOwned = player.inventory[armorId] > 0 || player.armor === armorId;
                            return {
                                id: armorId,
                                displayText: armor[armorId].name,
                                description:
                                    `${armor[armorId].description}\n` +
                                    `Defense: ${armor[armorId].defense}`,
                                trailText: `${armor[armorId].price} BTC`,
                                disabled: tooExpensive || alreadyOwned,
                                className: alreadyOwned ? 'muted' : (tooExpensive ? 'tooExpensive' : undefined),
                            };
                        });

                        options.push({
                            id: "_back",
                            displayText: "Back",
                            description: "Return to the merchant menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        merchant.buy('armor', selectedOptionId);
                    },
                },
                merchantRings: {
                    title: "RINGS",
                    landingHtml: () => {
                        return player.bitcoins > 0
                            ? `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                            : "Your wallet is emptier than a lughead's skull. But you can still look around";
                    },
                    getOptions: () => {
                        const options = (merchant.rings || []).map((ringId) => {
                            const tooExpensive = rings[ringId].price > player.bitcoins;
                            const alreadyOwned = player.inventory[ringId] > 0 || player.ring1 === ringId || player.ring2 === ringId;
                            return {
                                id: ringId,
                                displayText: rings[ringId].name,
                                description: rings[ringId].description,
                                trailText: `${rings[ringId].price} BTC`,
                                disabled: tooExpensive || alreadyOwned,
                                className: alreadyOwned ? 'muted' : (tooExpensive ? 'tooExpensive' : undefined),
                            };
                        });

                        options.push({
                            id: "_back",
                            displayText: "Back",
                            description: "Return to the merchant menu",
                        });

                        return options;
                    },
                    select: (selectedOptionId) => {
                        if (selectedOptionId === "_back") {
                            menu.close();
                        } else {
                            // Buy logic for rings
                            const ring = rings[selectedOptionId];
                            if (!ring) return;
                            if (player.bitcoins < ring.price) {
                                merchant.say('Too bad, kid. Come back when you get some coin!');
                                return;
                            }
                            if (player.inventory[selectedOptionId] > 0 || player.ring1 === selectedOptionId || player.ring2 === selectedOptionId) {
                                merchant.say("You already own that, stupid!");
                                return;
                            }
                            player.bitcoins -= ring.price;
                            playSFX('kaching');
                            player.inventory[selectedOptionId] = (player.inventory[selectedOptionId] || 0) + 1;
                            merchant.say("HAHA! You won't regret it!");
                            updateBattleLog(`You just bought a ${ring.name}`);
                            menu.render();
                        }
                    },
                },

                gambler: {
                    title: "GAMBLER",
                    onOpen: () => {
                        gambler.say('Place yer bets!');
                    },
                    onClose: () => {
                        gambler.isActiveOnFloor = false;
                        const gamblerPosition = gambler.location();
                        if (gamblerPosition) {
                            MAP[gamblerPosition.y][gamblerPosition.x] = new MapCell();
                        }
                    },
                    landingHtml: () => {
                        return (
                            `<span class="gambler">&lt;GAMBLER&gt;</span> "Welcome, dungeon dweller! ` +
                            `<span class="friendly">Roll a 12</span> and <span class="BTC">boost one of yer stats.</span> ` +
                            `Just <span class="tooExpensive">${gambler.playPrice}</span> to play!"\n\n` +
                            `You have <span class="BTC">${player.bitcoins} BTC</span> in your wallet`
                        );
                    },
                    getOptions: () => {
                        return [
                            {
                                id: "play",
                                displayText: "Play the game",
                                trailText: `${gambler.playPrice} BTC`,
                                description: "Take your chance with the gambler",
                            },
                            {
                                id: "_back",
                                displayText: "Leave",
                                description: "Leave this crusty fool",
                            },
                        ];
                    },
                    select: () => {
                        gamble();
                    },
                },
                chest: {
                    title: "TREASURE CHEST",
                    landingHtml: () => {
                        return `\n\n\nYou found a treasure chest! Do you want to open it?`;
                    },
                    getOptions: () => {
                        return [
                            {
                                id: "open",
                                displayText: "Hell yeah! Fondle that booty!",
                                description: "Claim your succulent reward!",
                            },
                            {
                                id: "_back",
                                displayText: "Resist your burning temptation...",
                                description: "DON'T claim your succulent reward!",
                            },
                        ];
                    },
                    select: (selectedOptionId) => {
                        if (selectedOptionId === "open") {
                            openChest();
                        }
                        menu.close();
                        render();
                    },
                },
                statAllocation: {
                    title: () => isLevelUpAllocation ? "LEVEL UP" : "STAT ALLOCATION",
                    landingHtml: () => {
                        return isLevelUpAllocation
                            ? `You leveled up! Allocate <span class="action">${player.remainingPoints}</span> points to your stats.`
                            : `Build your character using the <span class="action">${player.remainingPoints}</span> points you have been allotted. Use them wisely...`;
                    },
                    getOptions: () => {
                        return [
                            ...(!isLevelUpAllocation ? [{
                                id: "rollDice",
                                displayText: "[Diceroll]",
                                description: "Randomly allocate your points.",
                            }] : []),
                            {
                                id: "hp",
                                displayText: `HP: ${player.maxHp}`,
                                className: player.remainingPoints < 1 ? 'tooExpensive' : undefined,
                                description: "Increases Health Points.",
                            },
                            {
                                id: "defense",
                                displayText: `DEF: ${player.defense}`,
                                className: player.remainingPoints < 1 ? 'tooExpensive' : undefined,
                                description: "Increases defense against enemy attacks.",
                            },
                            {
                                id: "persuasion",
                                displayText: `PRS: ${player.persuasion}`,
                                className: player.remainingPoints < 1 ? 'tooExpensive' : undefined,
                                description: "Increases your chances at persuading monsters to join your party.",
                            },
                            {
                                id: "speed",
                                displayText: `SPD: ${player.speed}`,
                                className: player.remainingPoints < 1 ? 'tooExpensive' : undefined,
                                description: "Increases your movement speed. Each point allows you to move 5% faster.",
                            },
                            {
                                id: "luck",
                                displayText: `LUK: ${player.luck}`,
                                className: player.remainingPoints < 1 ? 'tooExpensive' : undefined,
                                description: "Increases crit rates and BTC rewards from chests.",
                            },
                            {
                                id: "reset",
                                displayText: "[Reset]",
                                description: isLevelUpAllocation
                                    ? "Reset your level up stat allocation."
                                    : "Reset your stat allocation.",
                            },
                            {
                                id: "_confirm",
                                displayText: "[Confirm]",
                                className: player.remainingPoints > 0 ? 'tooExpensive' : undefined,
                                description: isLevelUpAllocation
                                    ? "Finish your level up and continue your adventure!"
                                    : "Begin YOUR TardQuest!",
                            },
                        ];
                    },
                    select: (selectedOptionId) => {
                        if (selectedOptionId === "_confirm") {
                            if (player.remainingPoints > 0) {
                                updateBattleLog("You must allocate all points before continuing!");
                                return;
                            }
                            if (isLevelUpAllocation) {
                                isLevelUpAllocation = false;
                                updateBattleLog("Stats increased! You consume an unsuspecting rat to restore your health. Poor feller...");
                                player.level++;
                                player.exp = 0;
                                player.levelingUp = false;
                                player.hp = player.maxHp;
                            } else {
                                updateBattleLog("Stat allocation complete! You consume an unsuspecting rat to ensure you are in good health, and your adventure begins...");
                            }
                            menu.close();
                            render();
                            animEatRat();
                        } else if (selectedOptionId === "reset") {
                            if (isLevelUpAllocation) {
                                player.maxHp = levelUpAllocatedStats.base.maxHp;
                                player.defense = levelUpAllocatedStats.base.defense;
                                player.persuasion = levelUpAllocatedStats.base.persuasion;
                                player.speed = levelUpAllocatedStats.base.speed;
                                player.luck = levelUpAllocatedStats.base.luck;
                                player.remainingPoints = 3;
                                updateBattleLog("Level up stat allocation has been reset.");
                            } else {
                                resetStats();
                            }
                            menu.render();
                        } else if (!isLevelUpAllocation && selectedOptionId === "rollDice") {
                            rollDiceForStats();
                            menu.render();
                        } else if (player.remainingPoints > 0) {
                            switch (selectedOptionId) {
                                case "hp":
                                    player.maxHp += 1;
                                    player.hp = player.maxHp;
                                    break;
                                case "defense":
                                    player.defense += 1;
                                    break;
                                case "persuasion":
                                    player.persuasion += 1;
                                    break;
                                case "speed":
                                    player.speed += 1;
                                    break;
                                case "luck":
                                    player.luck += 1;
                                    break;
                            }
                            player.remainingPoints--;
                            menu.render();
                        } else {
                            updateBattleLog("No points remaining to allocate!");
                        }
                    },
                },
            },
        };

        let isLevelUpAllocation = false;
        let levelUpAllocatedStats = {};

        function startLevelUpAllocation() {
            isLevelUpAllocation = true;
            levelUpAllocatedStats = {};
            player.remainingPoints = 3;
            levelUpAllocatedStats.base = {
                maxHp: player.maxHp,
                defense: player.defense,
                persuasion: player.persuasion,
                speed: player.speed,
                luck: player.luck
            };
            menu.open("statAllocation");
        }

        player.remainingPoints = 10; //Points to allocate at start of game

        function resetStats() {
            player.remainingPoints = 10;
            player.maxHp = baseStats.maxHp;
            player.hp = player.maxHp;
            player.defense = baseStats.defense;
            player.persuasion = baseStats.persuasion;
            player.speed = baseStats.speed;
            player.luck = baseStats.luck;
            updateBattleLog("Stat allocation has been reset. Start over!");
        }

        function rollDiceForStats() {
            resetStats();
            const stats = ["hp", "defense", "persuasion", "speed", "luck"];
            while (player.remainingPoints > 0) {
                const randomStat = stats[Math.floor(Math.random() * stats.length)];
                switch (randomStat) {
                    case "hp":
                        player.maxHp += 1;
                        player.hp = player.maxHp;
                        break;
                    case "defense":
                        player.defense += 1;
                        break;
                    case "persuasion":
                        player.persuasion += 1;
                        break;
                    case "speed":
                        player.speed += 1;
                        break;
                    case "luck":
                        player.luck += 1;
                        break;
                }
                player.remainingPoints--;
            }
            updateBattleLog("Points have been randomly allocated. Good luck!");
        }

        menu.open("statAllocation");

        document.getElementById('resetButton').addEventListener('click', () => window.location.reload());

        const gambleFrames = [
    `



                  _____
                 /     -.
                 \\____.--


    `,

    `



              _,--.
             ( ;.  \`-.
             (  '    _
              \`-___-'

    `,

    `



           _,-.-.
          (_;.   \`-.
         (__:
          (__.'    _
           \`-____-'

    `,

    `


       _,-.-.
      (_;.   \`-.
      (__:
      (__'
      (__.'    _
       \`-____-'

    `,

    `


     _,--.---.
    (_;-.__   \`-.
    (______)
    (______)
    (_____)     _
     \`-_______-'

    `,

    `

          ____
     ____'._  '.
    (____)_ \`.  \`-.
    (______)\\
     (______)
      (_____)     _
       \`-_______-'

    `,

    `

            ..__
    ________\`.  '-
   (__)______ \`.  '-.
    (__)__/_\\
      (____)
       (___)        _
         \`-_______-'

    `,

    `

              ..__
    __________\`.  '-
   (___________ \`.  '-.
    (______..--.
      (__)_||__|
        (_)_          _
           \`-_______-'

    `,

    `

                ..__
      __________\`.  '-
     (___________ \`.  '-.
      (__________
       (________
       .-'--._ .----_   _
       | |  | |\` ___'.-'
       \`.|..' ' \`    |
               \`|____'

    `,

    `

                      ..__
            __________\`.  '-
           (___________ \`.  '-.
            (__________
             (________
               (____          _
                    \`-______-'
       .-----       .----.
      / \`.   \`.    /      \\
     /    '.___\`. /________\\
     \`.   /    /  \\        /
       \`./____/    \\      /
                    \`----'
    `,

    `

                          ..__
                __________\`.  '-
               (___________ \`.  '-.
                (__________
                 (________
                   (____
                        \`-______-


    .----------.   .----------.
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |__________|   |__________|
    `,

    `


                         _________
                        (_________
                          (_______
                           (______
                             (____



    .----------.   .----------.
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |__________|   |__________|
    `,

    `


                                 _
                                (_






    .----------.   .----------.
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |__________|   |__________|
    `,

    `










    .----------.   .----------.
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |          |   |          |
    |__________|   |__________|
    `,

];
    const dieDigit = [
        ['▗▄▋  ', ' ▐▋  ', '▝▀▀▘ '], // 1
        ['▄▀▀▄ ', ' ▄▀  ', '▀▀▀▀▘'], // 2
        ['▄▀▀▄ ', '  ▀▄ ', '▀▄▄▀ '], // 3
        ['█  █ ', '▀▀▀█ ', '   ▀ '], // 4
        ['█▀▀▀ ', '▀▀▀▄ ', '▀▄▄▀ '], // 5
        ['▄▀▀▀ ', '█▀▀▄ ', '▀▄▄▀ '], // 6
    ];
    </script>


</body></html>
